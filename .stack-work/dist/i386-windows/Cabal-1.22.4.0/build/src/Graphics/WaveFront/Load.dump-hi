
==================== FINAL INTERFACE ====================
2015-10-28 21:49:21.8222695 UTC

interface WaveF_Bmgqj22QsG4JDYPIKvoJPR:Graphics.WaveFront.Load 7102
  interface hash: b8cbb83ce95d65323693ee0fa2332a82
  ABI hash: 9f0e7efc8c1adf3b68c22e406e25a3b2
  export-list hash: 0a048884c9775492e54b6e762c93634e
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 3d55c2ccab0e0f2ffb653a81152f40b9
  sig of: Nothing
  used TH splices: False
  where
exports:
  Graphics.WaveFront.Load.loadMTL
  Graphics.WaveFront.Load.loadMaterials
  Graphics.WaveFront.Load.loadModel
  Graphics.WaveFront.Load.loadOBJ
module dependencies: Graphics.WaveFront.Parsers
                     Graphics.WaveFront.Utilities
package dependencies: array-0.5.1.0@array_E0sTtauuKsGDLZoT7lTbgZ
                      base-4.8.1.0* containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN
                      deepseq-1.4.1.1@deeps_LbCWUlehDDeLxurARKDH5o
                      filepath-1.4.0.0@filep_KsGE6pHE5eZHSN90ZVax6A ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0
orphans: base-4.8.1.0:GHC.Base base-4.8.1.0:GHC.Float
family instance modules: base-4.8.1.0:Control.Applicative
                         base-4.8.1.0:Data.Either base-4.8.1.0:Data.Functor.Identity
                         base-4.8.1.0:Data.Monoid base-4.8.1.0:Data.Type.Equality
                         base-4.8.1.0:Data.Void base-4.8.1.0:GHC.Exts
                         base-4.8.1.0:GHC.Generics
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Map.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Set.Base
import  -/  Graphics.WaveFront.Parsers 22d13111d26db3ad4c6a1e3108ee5278
  exports: 2b1bc0c0e1b255ff5cce97b0b0480762
  LibMTL 82ae7b0df03bbce026b2183f031d02b3
  MTL 9502e7315aafc191271c475bc7b7b3cf
  MTLTable ba3daf33e18bf3a311540791991429bc
  Model eece558577291361beecbc7c33c65e86
  OBJ 9e24bfddf2950589436094f3027f0702
  createMTLTable 73e69f14409c7d145789af1c6dedbb51
  createModel 7f22c05ec48809bcfe2cf7184ef8a1f0
  parseMTL a6ff1d8b3443778484fbe18856f0cc04
  parseOBJ ed6b532c76fe70f059a8f41b24d0e0af
import  -/  Graphics.WaveFront.Utilities 948a660dfd3934c1040754db3ed68d48
  exports: 778c00db3122d57636e4c4b8cc21f154
  second 29602b485082592399ebe9c0adde6230
import  -/  base-4.8.1.0:Data.Either ed72211389ff44c6b97fe41b7de5ee25
import  -/  base-4.8.1.0:Data.Traversable b7bf5f51fbf095c7e228e0d2ad343874
import  -/  base-4.8.1.0:Data.Tuple 012ad951a59a9d85fe1de36a2f012986
import  -/  base-4.8.1.0:GHC.Base ab3ff5d7de26c5c2e08d2bb04c08d54e
import  -/  base-4.8.1.0:GHC.List 02106028900ccbc904f69e4d283d08b6
import  -/  base-4.8.1.0:Prelude b9582be64b377d041643bc0573e05e36
import  -/  base-4.8.1.0:System.IO 35ae5994f394acd4d9a6b4ae413a8997
import  -/  filepath-1.4.0.0@filep_KsGE6pHE5eZHSN90ZVax6A:System.FilePath fb3c6661b7e50db0031cb960a757f2a9
import  -/  filepath-1.4.0.0@filep_KsGE6pHE5eZHSN90ZVax6A:System.FilePath.Windows 7da389da9f10ba1ed5040218e174ca94
import  -/  ghc-prim-0.4.0.0:GHC.Types 6b27fb3fdbd0e3f0925a4496c66513bb
503314081bf9c8479db0ee01a06cdc59
  loadMTL ::
    GHC.Base.String -> GHC.Types.IO Graphics.WaveFront.Parsers.MTL
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Graphics.WaveFront.Load.loadMTL1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0]
                               <Graphics.WaveFront.Parsers.MTL>_R)) -}
1289026577e4bf4c5583c12f814c7e02
  loadMTL1 ::
    GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Graphics.WaveFront.Parsers.MTL #)
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ fn :: GHC.Base.String
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case GHC.IO.Handle.FD.openFile1
                        fn
                        GHC.IO.IOMode.ReadMode
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv1
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 (# ipv2, Graphics.WaveFront.Parsers.parseMTL ipv3 #) } }) -}
f77f559c276605df7027a9c05be04714
  loadMaterials ::
    [GHC.Base.String]
    -> GHC.Types.IO Graphics.WaveFront.Parsers.MTLTable
  {- Arity: 2, Strictness: <S,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Graphics.WaveFront.Load.loadMaterials1
                  `cast`
                (<[GHC.Base.String]>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0]
                               <Graphics.WaveFront.Parsers.MTLTable>_R)) -}
86a9014634355d13c56e1d825b416c74
  loadMaterials1 ::
    [GHC.Base.String]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Graphics.WaveFront.Parsers.MTLTable #)
  {- Arity: 2, Strictness: <S,U><L,U>,
     Unfolding: (\ fns :: [GHC.Base.String]
                   s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Graphics.WaveFront.Load.loadMaterials2
                        fns
                        s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv,
                    Graphics.WaveFront.Parsers.$sfromList3
                      @ (Data.Map.Base.Map
                           GHC.Base.String Graphics.WaveFront.Parsers.Material)
                      (Graphics.WaveFront.Load.loadMaterials_go
                         fns
                         (GHC.Base.map
                            @ [(GHC.Types.Int,
                                Data.Either.Either
                                  Graphics.WaveFront.Parsers.MTLNoParse
                                  Graphics.WaveFront.Parsers.MTLToken,
                                GHC.Base.String)]
                            @ [Graphics.WaveFront.Parsers.MTLToken]
                            (Graphics.WaveFront.Load.loadMaterials_tokensOf
                               @ Graphics.WaveFront.Parsers.MTLNoParse
                               @ Graphics.WaveFront.Parsers.MTLToken
                               @ GHC.Types.Int
                               @ GHC.Base.String)
                            ipv1)) #) }) -}
13eba2b5069954adbab3ceda6ace8700
  loadMaterials2 ::
    [GHC.Base.String]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          [Graphics.WaveFront.Parsers.MTL] #)
  {- Arity: 2, Strictness: <S,1*U><L,U> -}
ec5097fe9f958d32cdce202449a4ab27
  loadMaterials_go ::
    [[GHC.Types.Char]]
    -> [[Graphics.WaveFront.Parsers.MTLToken]]
    -> [(GHC.Base.String,
         Data.Map.Base.Map
           GHC.Base.String Graphics.WaveFront.Parsers.Material)]
  {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
c4ea1085ee04dad377abec8ffb87ccf2
  loadMaterials_tokensOf :: [(a1, Data.Either.Either a b, c)] -> [b]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a1 @ b @ a2 @ c x :: [(a2, Data.Either.Either a1 b, c)] ->
                 Data.Either.rights1
                   @ a1
                   @ b
                   (GHC.Base.build
                      @ (Data.Either.Either a1 b)
                      (\ @ b1
                         c1 :: Data.Either.Either a1 b -> b1 -> b1[OneShot]
                         n :: b1[OneShot] ->
                       GHC.Base.foldr
                         @ (a2, Data.Either.Either a1 b, c)
                         @ b1
                         (GHC.Base.mapFB
                            @ (Data.Either.Either a1 b)
                            @ b1
                            @ (a2, Data.Either.Either a1 b, c)
                            c1
                            (Graphics.WaveFront.Utilities.second
                               @ a2
                               @ (Data.Either.Either a1 b)
                               @ c))
                         n
                         x))) -}
840a1ba124ae940dda8a7c6275d63dee
  loadModel ::
    GHC.Base.String -> GHC.Types.IO Graphics.WaveFront.Parsers.Model
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Graphics.WaveFront.Load.loadModel1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0]
                               <Graphics.WaveFront.Parsers.Model>_R)) -}
e978057c95c6d116b99595954ced40d7
  loadModel1 ::
    GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Graphics.WaveFront.Parsers.Model #)
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: (\ fn :: GHC.Base.String
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case GHC.IO.Handle.FD.openFile1
                        fn
                        GHC.IO.IOMode.ReadMode
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv1
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 let {
                   obj :: Graphics.WaveFront.Parsers.OBJ
                   = Graphics.WaveFront.Parsers.parseOBJ ipv3
                 } in
                 let {
                   fns :: [GHC.Base.String]
                   = let {
                       lvl1 :: GHC.IO.FilePath
                       = case System.FilePath.Windows.$wsplitFileName_
                                fn of ww { (#,#) ww1 ww2 ->
                         case ww1 of wild1 {
                           [] -> System.FilePath.Windows.dropFileName1 : ds3 ds4 -> wild1 } }
                     } in
                     letrec {
                       go :: [Graphics.WaveFront.Parsers.OBJToken] -> [GHC.Base.String]
                         {- Arity: 1, Strictness: <S,1*U> -}
                       = \ ds :: [Graphics.WaveFront.Parsers.OBJToken] ->
                         case ds of wild {
                           [] -> GHC.Types.[] @ GHC.Base.String
                           : y ys
                           -> case y of wild1 {
                                DEFAULT -> go ys
                                Graphics.WaveFront.Parsers.LibMTL name
                                -> GHC.Types.:
                                     @ GHC.Base.String
                                     (System.FilePath.Windows.combine lvl1 name)
                                     (go ys) } }
                     } in
                     go
                       (Data.Either.rights1
                          @ Graphics.WaveFront.Parsers.OBJNoParse
                          @ Graphics.WaveFront.Parsers.OBJToken
                          (GHC.Base.map
                             @ (GHC.Types.Int,
                                Data.Either.Either
                                  Graphics.WaveFront.Parsers.OBJNoParse
                                  Graphics.WaveFront.Parsers.OBJToken,
                                GHC.Base.String)
                             @ (Data.Either.Either
                                  Graphics.WaveFront.Parsers.OBJNoParse
                                  Graphics.WaveFront.Parsers.OBJToken)
                             (Graphics.WaveFront.Utilities.second
                                @ GHC.Types.Int
                                @ (Data.Either.Either
                                     Graphics.WaveFront.Parsers.OBJNoParse
                                     Graphics.WaveFront.Parsers.OBJToken)
                                @ GHC.Base.String)
                             obj))
                 } in
                 case Graphics.WaveFront.Load.loadMaterials2
                        fns
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 (# ipv4,
                    case Graphics.WaveFront.Parsers.$wcreateModel
                           obj
                           (Graphics.WaveFront.Parsers.$sfromList3
                              @ (Data.Map.Base.Map
                                   GHC.Base.String Graphics.WaveFront.Parsers.Material)
                              (Graphics.WaveFront.Load.loadMaterials_go
                                 fns
                                 (GHC.Base.map
                                    @ [(GHC.Types.Int,
                                        Data.Either.Either
                                          Graphics.WaveFront.Parsers.MTLNoParse
                                          Graphics.WaveFront.Parsers.MTLToken,
                                        GHC.Base.String)]
                                    @ [Graphics.WaveFront.Parsers.MTLToken]
                                    (Graphics.WaveFront.Load.loadMaterials_tokensOf
                                       @ Graphics.WaveFront.Parsers.MTLNoParse
                                       @ Graphics.WaveFront.Parsers.MTLToken
                                       @ GHC.Types.Int
                                       @ GHC.Base.String)
                                    ipv5))) of ww { (#,,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                    Graphics.WaveFront.Parsers.Model
                      ww1
                      ww2
                      ww3
                      ww4
                      ww5
                      ww6
                      ww7 } #) } } }) -}
0586cd30380683ade75324cd74d578e0
  loadOBJ ::
    GHC.Base.String -> GHC.Types.IO Graphics.WaveFront.Parsers.OBJ
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Graphics.WaveFront.Load.loadOBJ1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0]
                               <Graphics.WaveFront.Parsers.OBJ>_R)) -}
6aa0c7383f9ac392ec6d235bb2e5d134
  loadOBJ1 ::
    GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Graphics.WaveFront.Parsers.OBJ #)
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ fn :: GHC.Base.String
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case GHC.IO.Handle.FD.openFile1
                        fn
                        GHC.IO.IOMode.ReadMode
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv1
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 (# ipv2, Graphics.WaveFront.Parsers.parseOBJ ipv3 #) } }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

