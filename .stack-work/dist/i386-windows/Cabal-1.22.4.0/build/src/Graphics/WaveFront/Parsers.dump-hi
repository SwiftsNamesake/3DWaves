
==================== FINAL INTERFACE ====================
2015-10-28 21:49:21.1881984 UTC

interface WaveF_Bmgqj22QsG4JDYPIKvoJPR:Graphics.WaveFront.Parsers 7102
  interface hash: 3b7b0510faaadda1bfd9245017fa9127
  ABI hash: 22d13111d26db3ad4c6a1e3108ee5278
  export-list hash: 2b1bc0c0e1b255ff5cce97b0b0480762
  orphan hash: 96ed909f58992876e172557e997d5d93
  flag hash: 6d254d3ebda86030ca3581a0a027047a
  sig of: Nothing
  used TH splices: False
  where
exports:
  Graphics.WaveFront.Parsers.boundingbox
  Graphics.WaveFront.Parsers.createMTLTable
  Graphics.WaveFront.Parsers.createModel
  Graphics.WaveFront.Parsers.facesOf
  Graphics.WaveFront.Parsers.hasTextures
  Graphics.WaveFront.Parsers.materialsOf
  Graphics.WaveFront.Parsers.modelAttributes
  Graphics.WaveFront.Parsers.parseMTL
  Graphics.WaveFront.Parsers.parseOBJ
  Graphics.WaveFront.Parsers.tessellate
  Graphics.WaveFront.Parsers.textures
  Graphics.WaveFront.Parsers.BoundingBox{Graphics.WaveFront.Parsers.BoundingBox Graphics.WaveFront.Parsers.back Graphics.WaveFront.Parsers.bottom Graphics.WaveFront.Parsers.front Graphics.WaveFront.Parsers.left Graphics.WaveFront.Parsers.right Graphics.WaveFront.Parsers.top}
  Graphics.WaveFront.Parsers.Face{Graphics.WaveFront.Parsers.Face Graphics.WaveFront.Parsers.indices Graphics.WaveFront.Parsers.material}
  Graphics.WaveFront.Parsers.MTL
  Graphics.WaveFront.Parsers.MTLNoParse{Graphics.WaveFront.Parsers.MTLComment Graphics.WaveFront.Parsers.MTLEmpty Graphics.WaveFront.Parsers.MTLNoParse Graphics.WaveFront.Parsers.MTLNoSuchAttribute}
  Graphics.WaveFront.Parsers.MTLTable
  Graphics.WaveFront.Parsers.MTLToken{Graphics.WaveFront.Parsers.Ambient Graphics.WaveFront.Parsers.Diffuse Graphics.WaveFront.Parsers.MapDiffuse Graphics.WaveFront.Parsers.NewMaterial Graphics.WaveFront.Parsers.Specular}
  Graphics.WaveFront.Parsers.Material{Graphics.WaveFront.Parsers.Material Graphics.WaveFront.Parsers.ambient Graphics.WaveFront.Parsers.diffuse Graphics.WaveFront.Parsers.specular Graphics.WaveFront.Parsers.texture}
  Graphics.WaveFront.Parsers.Model{Graphics.WaveFront.Parsers.Model Graphics.WaveFront.Parsers.faces Graphics.WaveFront.Parsers.groups Graphics.WaveFront.Parsers.materials Graphics.WaveFront.Parsers.normals Graphics.WaveFront.Parsers.objects Graphics.WaveFront.Parsers.texcoords Graphics.WaveFront.Parsers.vertices}
  Graphics.WaveFront.Parsers.OBJ
  Graphics.WaveFront.Parsers.OBJNoParse{Graphics.WaveFront.Parsers.OBJComment Graphics.WaveFront.Parsers.OBJEmpty Graphics.WaveFront.Parsers.OBJNoParse Graphics.WaveFront.Parsers.OBJNoSuchAttribute}
  Graphics.WaveFront.Parsers.OBJToken{Graphics.WaveFront.Parsers.Group Graphics.WaveFront.Parsers.LibMTL Graphics.WaveFront.Parsers.OBJFace Graphics.WaveFront.Parsers.OBJNormal Graphics.WaveFront.Parsers.OBJTexture Graphics.WaveFront.Parsers.OBJVertex Graphics.WaveFront.Parsers.Object Graphics.WaveFront.Parsers.UseMTL}
module dependencies: Graphics.WaveFront.Utilities
package dependencies: array-0.5.1.0@array_E0sTtauuKsGDLZoT7lTbgZ
                      base-4.8.1.0* containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN
                      deepseq-1.4.1.1@deeps_LbCWUlehDDeLxurARKDH5o ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0
orphans: base-4.8.1.0:GHC.Base base-4.8.1.0:GHC.Float
family instance modules: base-4.8.1.0:Control.Applicative
                         base-4.8.1.0:Data.Either base-4.8.1.0:Data.Functor.Identity
                         base-4.8.1.0:Data.Monoid base-4.8.1.0:Data.Type.Equality
                         base-4.8.1.0:Data.Void base-4.8.1.0:GHC.Exts
                         base-4.8.1.0:GHC.Generics
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Map.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Set.Base
import  -/  Graphics.WaveFront.Utilities 948a660dfd3934c1040754db3ed68d48
  exports: 778c00db3122d57636e4c4b8cc21f154
  cuts f69e6333e67a55c71834c62215ffa8e1
  enumerate c1ee6453df233fa5e950f05196220f84
  isComment 6357daf11f3e72490c06bdf7102f7029
  pairwise 0ef063d26127b151023d68cb1a013b7b
  parseTokenWith 4aad729e0b3843797daa05fcd23872b6
  second 29602b485082592399ebe9c0adde6230
  third 23f9d6adf04ced0006e748fbc9a41d10
  vector 876b7e9e67d641fbd5162815fcd77d19
import  -/  base-4.8.1.0:Control.Monad f3a5726b2806fcfc5c12e585827664a5
import  -/  base-4.8.1.0:Data.Char fed1fa33e52ac848a587560e982bba77
import  -/  base-4.8.1.0:Data.Either ed72211389ff44c6b97fe41b7de5ee25
import  -/  base-4.8.1.0:Data.Foldable ffb6688acc4613dcd183df2b082c7d83
import  -/  base-4.8.1.0:Data.List df6095186dd0ce29e5b3971627965383
import  -/  base-4.8.1.0:Data.Maybe 1cb58de2b04ee3c0c0a7dc9201184aff
import  -/  base-4.8.1.0:Data.OldList 74dbdac9598e3a4ba669f9246f2946a3
import  -/  base-4.8.1.0:Data.Traversable b7bf5f51fbf095c7e228e0d2ad343874
import  -/  base-4.8.1.0:Data.Tuple 012ad951a59a9d85fe1de36a2f012986
import  -/  base-4.8.1.0:GHC.Base ab3ff5d7de26c5c2e08d2bb04c08d54e
import  -/  base-4.8.1.0:GHC.List 02106028900ccbc904f69e4d283d08b6
import  -/  base-4.8.1.0:GHC.Num 099c29dfc2c0e3c154d011e91b663293
import  -/  base-4.8.1.0:GHC.Show a5036aec028ec69f4fc453728c99395e
import  -/  base-4.8.1.0:GHC.Unicode bed09d5db094d4196c8520e6b25efaa4
import  -/  base-4.8.1.0:Prelude b9582be64b377d041643bc0573e05e36
import  -/  base-4.8.1.0:Text.Read 235672868e760c109e0b13caf9e360b2
import  -/  containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Map dcdf9340e0b33ae402492f624d45fa55
import  -/  containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Map.Base 1cdecb2c1fde9797f754c2156029c40f
import  -/  containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Set d002dff41b3b26c61a3342e02af52666
import  -/  containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Set.Base 73f0ae822b7a8f57ad580365a2247e23
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
ebe92a8de69bd7cad10bd0c52e6f6e36
  $fEqMTLToken ∷ GHC.Classes.Eq Graphics.WaveFront.Parsers.MTLToken
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Graphics.WaveFront.Parsers.MTLToken
                  Graphics.WaveFront.Parsers.$fEqMTLToken_$c==
                  Graphics.WaveFront.Parsers.$fEqMTLToken_$c/= -}
ebe92a8de69bd7cad10bd0c52e6f6e36
  $fEqMTLToken_$c/= ∷
    Graphics.WaveFront.Parsers.MTLToken
    → Graphics.WaveFront.Parsers.MTLToken → GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a1 ∷ Graphics.WaveFront.Parsers.MTLToken
                   b ∷ Graphics.WaveFront.Parsers.MTLToken →
                 case Graphics.WaveFront.Parsers.$fEqMTLToken_$c== a1 b of wild {
                   GHC.Types.False → GHC.Types.True
                   GHC.Types.True → GHC.Types.False }) -}
ebe92a8de69bd7cad10bd0c52e6f6e36
  $fEqMTLToken_$c== ∷
    Graphics.WaveFront.Parsers.MTLToken
    → Graphics.WaveFront.Parsers.MTLToken → GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds ∷ Graphics.WaveFront.Parsers.MTLToken
                   ds1 ∷ Graphics.WaveFront.Parsers.MTLToken →
                 case ds of wild {
                   Graphics.WaveFront.Parsers.Ambient a1 a2 a3 a4
                   → case ds1 of wild1 {
                       DEFAULT → GHC.Types.False
                       Graphics.WaveFront.Parsers.Ambient b1 b2 b3 b4
                       → case a1 of wild2 { GHC.Types.F# x →
                         case b1 of wild3 { GHC.Types.F# y →
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.eqFloat# x y) of wild4 {
                           GHC.Types.False → GHC.Types.False
                           GHC.Types.True
                           → case a2 of wild5 { GHC.Types.F# x1 →
                             case b2 of wild6 { GHC.Types.F# y1 →
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.eqFloat# x1 y1) of wild7 {
                               GHC.Types.False → GHC.Types.False
                               GHC.Types.True
                               → case a3 of wild8 { GHC.Types.F# x2 →
                                 case b3 of wild9 { GHC.Types.F# y2 →
                                 case GHC.Prim.tagToEnum#
                                        @ GHC.Types.Bool
                                        (GHC.Prim.eqFloat# x2 y2) of wild10 {
                                   GHC.Types.False → GHC.Types.False
                                   GHC.Types.True
                                   → case a4 of wild11 {
                                       GHC.Base.Nothing
                                       → case b4 of wild12 {
                                           GHC.Base.Nothing → GHC.Types.True
                                           GHC.Base.Just ipv → GHC.Types.False }
                                       GHC.Base.Just a7
                                       → case b4 of wild12 {
                                           GHC.Base.Nothing → GHC.Types.False
                                           GHC.Base.Just b7
                                           → GHC.Classes.$fEqFloat_$c==
                                               a7
                                               b7 } } } } } } } } } } } }
                   Graphics.WaveFront.Parsers.Diffuse a1 a2 a3 a4
                   → case ds1 of wild1 {
                       DEFAULT → GHC.Types.False
                       Graphics.WaveFront.Parsers.Diffuse b1 b2 b3 b4
                       → case a1 of wild2 { GHC.Types.F# x →
                         case b1 of wild3 { GHC.Types.F# y →
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.eqFloat# x y) of wild4 {
                           GHC.Types.False → GHC.Types.False
                           GHC.Types.True
                           → case a2 of wild5 { GHC.Types.F# x1 →
                             case b2 of wild6 { GHC.Types.F# y1 →
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.eqFloat# x1 y1) of wild7 {
                               GHC.Types.False → GHC.Types.False
                               GHC.Types.True
                               → case a3 of wild8 { GHC.Types.F# x2 →
                                 case b3 of wild9 { GHC.Types.F# y2 →
                                 case GHC.Prim.tagToEnum#
                                        @ GHC.Types.Bool
                                        (GHC.Prim.eqFloat# x2 y2) of wild10 {
                                   GHC.Types.False → GHC.Types.False
                                   GHC.Types.True
                                   → case a4 of wild11 {
                                       GHC.Base.Nothing
                                       → case b4 of wild12 {
                                           GHC.Base.Nothing → GHC.Types.True
                                           GHC.Base.Just ipv → GHC.Types.False }
                                       GHC.Base.Just a7
                                       → case b4 of wild12 {
                                           GHC.Base.Nothing → GHC.Types.False
                                           GHC.Base.Just b7
                                           → GHC.Classes.$fEqFloat_$c==
                                               a7
                                               b7 } } } } } } } } } } } }
                   Graphics.WaveFront.Parsers.Specular a1 a2 a3 a4
                   → case ds1 of wild1 {
                       DEFAULT → GHC.Types.False
                       Graphics.WaveFront.Parsers.Specular b1 b2 b3 b4
                       → case a1 of wild2 { GHC.Types.F# x →
                         case b1 of wild3 { GHC.Types.F# y →
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.eqFloat# x y) of wild4 {
                           GHC.Types.False → GHC.Types.False
                           GHC.Types.True
                           → case a2 of wild5 { GHC.Types.F# x1 →
                             case b2 of wild6 { GHC.Types.F# y1 →
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.eqFloat# x1 y1) of wild7 {
                               GHC.Types.False → GHC.Types.False
                               GHC.Types.True
                               → case a3 of wild8 { GHC.Types.F# x2 →
                                 case b3 of wild9 { GHC.Types.F# y2 →
                                 case GHC.Prim.tagToEnum#
                                        @ GHC.Types.Bool
                                        (GHC.Prim.eqFloat# x2 y2) of wild10 {
                                   GHC.Types.False → GHC.Types.False
                                   GHC.Types.True
                                   → case a4 of wild11 {
                                       GHC.Base.Nothing
                                       → case b4 of wild12 {
                                           GHC.Base.Nothing → GHC.Types.True
                                           GHC.Base.Just ipv → GHC.Types.False }
                                       GHC.Base.Just a7
                                       → case b4 of wild12 {
                                           GHC.Base.Nothing → GHC.Types.False
                                           GHC.Base.Just b7
                                           → GHC.Classes.$fEqFloat_$c==
                                               a7
                                               b7 } } } } } } } } } } } }
                   Graphics.WaveFront.Parsers.MapDiffuse a1
                   → case ds1 of wild1 {
                       DEFAULT → GHC.Types.False
                       Graphics.WaveFront.Parsers.MapDiffuse b1
                       → GHC.Base.eqString a1 b1 }
                   Graphics.WaveFront.Parsers.NewMaterial a1
                   → case ds1 of wild1 {
                       DEFAULT → GHC.Types.False
                       Graphics.WaveFront.Parsers.NewMaterial b1
                       → GHC.Base.eqString a1 b1 } }) -}
631a814f3e280c0b87d2b54c21ec6703
  $fEqOBJToken ∷ GHC.Classes.Eq Graphics.WaveFront.Parsers.OBJToken
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Graphics.WaveFront.Parsers.OBJToken
                  Graphics.WaveFront.Parsers.$fEqOBJToken_$c==
                  Graphics.WaveFront.Parsers.$fEqOBJToken_$c/= -}
9b4cbe0e069dabe62b774e2b5978d8bb
  $fEqOBJToken1 ∷ GHC.Classes.Eq (GHC.Base.Maybe GHC.Types.Int)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Graphics.WaveFront.Parsers.$fEqOBJToken_$s$fEqMaybe -}
631a814f3e280c0b87d2b54c21ec6703
  $fEqOBJToken_$c/= ∷
    Graphics.WaveFront.Parsers.OBJToken
    → Graphics.WaveFront.Parsers.OBJToken → GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a1 ∷ Graphics.WaveFront.Parsers.OBJToken
                   b ∷ Graphics.WaveFront.Parsers.OBJToken →
                 case Graphics.WaveFront.Parsers.$fEqOBJToken_$c== a1 b of wild {
                   GHC.Types.False → GHC.Types.True
                   GHC.Types.True → GHC.Types.False }) -}
631a814f3e280c0b87d2b54c21ec6703
  $fEqOBJToken_$c== ∷
    Graphics.WaveFront.Parsers.OBJToken
    → Graphics.WaveFront.Parsers.OBJToken → GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds ∷ Graphics.WaveFront.Parsers.OBJToken
                   ds1 ∷ Graphics.WaveFront.Parsers.OBJToken →
                 case ds of wild {
                   Graphics.WaveFront.Parsers.OBJVertex a1 a2 a3
                   → case ds1 of wild1 {
                       DEFAULT → GHC.Types.False
                       Graphics.WaveFront.Parsers.OBJVertex b1 b2 b3
                       → case a1 of wild2 { GHC.Types.F# x →
                         case b1 of wild3 { GHC.Types.F# y →
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.eqFloat# x y) of wild4 {
                           GHC.Types.False → GHC.Types.False
                           GHC.Types.True
                           → case a2 of wild5 { GHC.Types.F# x1 →
                             case b2 of wild6 { GHC.Types.F# y1 →
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.eqFloat# x1 y1) of wild7 {
                               GHC.Types.False → GHC.Types.False
                               GHC.Types.True → GHC.Classes.$fEqFloat_$c== a3 b3 } } } } } } }
                   Graphics.WaveFront.Parsers.OBJNormal a1 a2 a3
                   → case ds1 of wild1 {
                       DEFAULT → GHC.Types.False
                       Graphics.WaveFront.Parsers.OBJNormal b1 b2 b3
                       → case a1 of wild2 { GHC.Types.F# x →
                         case b1 of wild3 { GHC.Types.F# y →
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.eqFloat# x y) of wild4 {
                           GHC.Types.False → GHC.Types.False
                           GHC.Types.True
                           → case a2 of wild5 { GHC.Types.F# x1 →
                             case b2 of wild6 { GHC.Types.F# y1 →
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.eqFloat# x1 y1) of wild7 {
                               GHC.Types.False → GHC.Types.False
                               GHC.Types.True → GHC.Classes.$fEqFloat_$c== a3 b3 } } } } } } }
                   Graphics.WaveFront.Parsers.OBJTexture a1 a2
                   → case ds1 of wild1 {
                       DEFAULT → GHC.Types.False
                       Graphics.WaveFront.Parsers.OBJTexture b1 b2
                       → case a1 of wild2 { GHC.Types.F# x →
                         case b1 of wild3 { GHC.Types.F# y →
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.eqFloat# x y) of wild4 {
                           GHC.Types.False → GHC.Types.False
                           GHC.Types.True → GHC.Classes.$fEqFloat_$c== a2 b2 } } } }
                   Graphics.WaveFront.Parsers.OBJFace a1
                   → case ds1 of wild1 {
                       DEFAULT → GHC.Types.False
                       Graphics.WaveFront.Parsers.OBJFace b1
                       → GHC.Classes.$fEq[]_$c==
                           @ (GHC.Types.Int,
                              GHC.Base.Maybe GHC.Types.Int,
                              GHC.Base.Maybe GHC.Types.Int)
                           Graphics.WaveFront.Parsers.$fEqOBJToken_$s$fEq(,,)
                           a1
                           b1 }
                   Graphics.WaveFront.Parsers.UseMTL a1
                   → case ds1 of wild1 {
                       DEFAULT → GHC.Types.False
                       Graphics.WaveFront.Parsers.UseMTL b1 → GHC.Base.eqString a1 b1 }
                   Graphics.WaveFront.Parsers.LibMTL a1
                   → case ds1 of wild1 {
                       DEFAULT → GHC.Types.False
                       Graphics.WaveFront.Parsers.LibMTL b1 → GHC.Base.eqString a1 b1 }
                   Graphics.WaveFront.Parsers.Group a1
                   → case ds1 of wild1 {
                       DEFAULT → GHC.Types.False
                       Graphics.WaveFront.Parsers.Group b1
                       → GHC.Classes.$fEq[]_$s$c==2 a1 b1 }
                   Graphics.WaveFront.Parsers.Object a1
                   → case ds1 of wild1 {
                       DEFAULT → GHC.Types.False
                       Graphics.WaveFront.Parsers.Object b1
                       → GHC.Classes.$fEq[]_$s$c==2 a1 b1 } }) -}
9bc9c7504b27268ea2d55feb0b141b54
  $fEqOBJToken_$s$fEq(,,) ∷
    GHC.Classes.Eq
      (GHC.Types.Int,
       GHC.Base.Maybe GHC.Types.Int,
       GHC.Base.Maybe GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Types.Int,
                     GHC.Base.Maybe GHC.Types.Int,
                     GHC.Base.Maybe GHC.Types.Int)
                  (GHC.Classes.$fEq(,,)_$c==
                     @ GHC.Types.Int
                     @ (GHC.Base.Maybe GHC.Types.Int)
                     @ (GHC.Base.Maybe GHC.Types.Int)
                     GHC.Classes.$fEqInt
                     Graphics.WaveFront.Parsers.$fEqOBJToken1
                     Graphics.WaveFront.Parsers.$fEqOBJToken1)
                  Graphics.WaveFront.Parsers.$fEqOBJToken_$s$fEq(,,)_$c/= -}
809044943c03bfbc01ead1e036800ff4
  $fEqOBJToken_$s$fEq(,,)_$c/= ∷
    (GHC.Types.Int,
     GHC.Base.Maybe GHC.Types.Int,
     GHC.Base.Maybe GHC.Types.Int)
    → (GHC.Types.Int,
       GHC.Base.Maybe GHC.Types.Int,
       GHC.Base.Maybe GHC.Types.Int)
    → GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U(U),1*U,1*U)><S(SLL),1*U(1*U(U),1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ a1 ∷ (GHC.Types.Int,
                         GHC.Base.Maybe GHC.Types.Int,
                         GHC.Base.Maybe GHC.Types.Int)
                   b1 ∷ (GHC.Types.Int,
                         GHC.Base.Maybe GHC.Types.Int,
                         GHC.Base.Maybe GHC.Types.Int) →
                 case GHC.Classes.$fEq(,,)_$c==
                        @ GHC.Types.Int
                        @ (GHC.Base.Maybe GHC.Types.Int)
                        @ (GHC.Base.Maybe GHC.Types.Int)
                        GHC.Classes.$fEqInt
                        Graphics.WaveFront.Parsers.$fEqOBJToken1
                        Graphics.WaveFront.Parsers.$fEqOBJToken1
                        a1
                        b1 of wild {
                   GHC.Types.False → GHC.Types.True
                   GHC.Types.True → GHC.Types.False }) -}
d07e47fd862eee016108368395d4b3fe
  $fEqOBJToken_$s$fEqMaybe ∷
    GHC.Classes.Eq (GHC.Base.Maybe GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe GHC.Types.Int)
                  Data.Bits.$s$fEqMaybe_$c==
                  (GHC.Base.$fEqMaybe_$c/= @ GHC.Types.Int GHC.Classes.$fEqInt) -}
f6d4806d9e59a4057a9ccebd135e5350
  $fShowFace ∷ GHC.Show.Show Graphics.WaveFront.Parsers.Face
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Graphics.WaveFront.Parsers.Face
                  Graphics.WaveFront.Parsers.$fShowFace_$cshowsPrec
                  Graphics.WaveFront.Parsers.$fShowFace_$cshow
                  Graphics.WaveFront.Parsers.$fShowFace_$cshowList -}
f6d4806d9e59a4057a9ccebd135e5350
  $fShowFace1 ∷ Graphics.WaveFront.Parsers.Face → GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w ∷ Graphics.WaveFront.Parsers.Face →
                 case w of ww { Graphics.WaveFront.Parsers.Face ww1 ww2 →
                 Graphics.WaveFront.Parsers.$w$cshowsPrec 0 ww1 ww2 }) -}
f6d4806d9e59a4057a9ccebd135e5350
  $fShowFace_$cshow ∷
    Graphics.WaveFront.Parsers.Face → GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(U,1*U(U(U(U),U(U),U(U),U(U)),U(U(U),U(U),U(U),U(U)),U(U(U),U(U),U(U),U(U)),1*U))>,
     Unfolding: InlineRule (1, True, False)
                (\ x ∷ Graphics.WaveFront.Parsers.Face →
                 Graphics.WaveFront.Parsers.$fShowFace_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
f6d4806d9e59a4057a9ccebd135e5350
  $fShowFace_$cshowList ∷
    [Graphics.WaveFront.Parsers.Face] → GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Graphics.WaveFront.Parsers.Face
                   Graphics.WaveFront.Parsers.$fShowFace1) -}
f6d4806d9e59a4057a9ccebd135e5350
  $fShowFace_$cshowsPrec ∷
    GHC.Types.Int → Graphics.WaveFront.Parsers.Face → GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S,1*U(U)><S,1*U(U,1*U(U(U(U),U(U),U(U),U(U)),U(U(U),U(U),U(U),U(U)),U(U(U),U(U),U(U),U(U)),1*U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w ∷ GHC.Types.Int w1 ∷ Graphics.WaveFront.Parsers.Face →
                 case w of ww { GHC.Types.I# ww1 →
                 case w1 of ww2 { Graphics.WaveFront.Parsers.Face ww3 ww4 →
                 Graphics.WaveFront.Parsers.$w$cshowsPrec ww1 ww3 ww4 } }) -}
cf47180994ba8f7eeebbf85544a19624
  $fShowMTLNoParse ∷
    GHC.Show.Show Graphics.WaveFront.Parsers.MTLNoParse
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Graphics.WaveFront.Parsers.MTLNoParse
                  Graphics.WaveFront.Parsers.$fShowMTLNoParse_$cshowsPrec
                  Graphics.WaveFront.Parsers.$fShowMTLNoParse_$cshow
                  Graphics.WaveFront.Parsers.$fShowMTLNoParse_$cshowList -}
cf47180994ba8f7eeebbf85544a19624
  $fShowMTLNoParse1 ∷
    Graphics.WaveFront.Parsers.MTLNoParse → GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (Graphics.WaveFront.Parsers.$fShowMTLNoParse_$cshowsPrec
                   Graphics.WaveFront.Parsers.$fShowMTLNoParse2) -}
863b2e032a0b56a491756dd765b3ce0e
  $fShowMTLNoParse2 ∷ GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0) -}
f15a5e8fed7bd1cf288d3295988a383d
  $fShowMTLNoParse3 ∷ [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "MTLNoParse "#) -}
c80d6a16081af095c6d39be4831b1079
  $fShowMTLNoParse4 ∷ [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "MTLNoSuchAttribute "#) -}
989cb52498ec20aa27706e6430664129
  $fShowMTLNoParse5 ∷ [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "MTLEmpty"#) -}
0951981bc0636485814a0d2d2e1d7f9e
  $fShowMTLNoParse6 ∷ [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "MTLComment "#) -}
cf47180994ba8f7eeebbf85544a19624
  $fShowMTLNoParse_$cshow ∷
    Graphics.WaveFront.Parsers.MTLNoParse → GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x ∷ Graphics.WaveFront.Parsers.MTLNoParse →
                 Graphics.WaveFront.Parsers.$fShowMTLNoParse_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
cf47180994ba8f7eeebbf85544a19624
  $fShowMTLNoParse_$cshowList ∷
    [Graphics.WaveFront.Parsers.MTLNoParse] → GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Graphics.WaveFront.Parsers.MTLNoParse
                   Graphics.WaveFront.Parsers.$fShowMTLNoParse1) -}
cf47180994ba8f7eeebbf85544a19624
  $fShowMTLNoParse_$cshowsPrec ∷
    GHC.Types.Int
    → Graphics.WaveFront.Parsers.MTLNoParse → GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ a1 ∷ GHC.Types.Int
                   ds ∷ Graphics.WaveFront.Parsers.MTLNoParse
                   eta ∷ GHC.Base.String →
                 case ds of wild {
                   Graphics.WaveFront.Parsers.MTLComment b1
                   → case a1 of wild1 { GHC.Types.I# x →
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# x 11) of wild2 {
                       GHC.Types.False
                       → GHC.Base.++
                           @ GHC.Types.Char
                           Graphics.WaveFront.Parsers.$fShowMTLNoParse6
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.shows6
                              (GHC.Show.showLitString
                                 b1
                                 (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 eta)))
                       GHC.Types.True
                       → GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.shows9
                           (GHC.Base.++
                              @ GHC.Types.Char
                              Graphics.WaveFront.Parsers.$fShowMTLNoParse6
                              (GHC.Types.:
                                 @ GHC.Types.Char
                                 GHC.Show.shows6
                                 (GHC.Show.showLitString
                                    b1
                                    (GHC.Types.:
                                       @ GHC.Types.Char
                                       GHC.Show.shows6
                                       (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta))))) } }
                   Graphics.WaveFront.Parsers.MTLEmpty
                   → GHC.Base.++
                       @ GHC.Types.Char
                       Graphics.WaveFront.Parsers.$fShowMTLNoParse5
                       eta
                   Graphics.WaveFront.Parsers.MTLNoSuchAttribute b1
                   → case a1 of wild1 { GHC.Types.I# x →
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# x 11) of wild2 {
                       GHC.Types.False
                       → GHC.Base.++
                           @ GHC.Types.Char
                           Graphics.WaveFront.Parsers.$fShowMTLNoParse4
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.shows6
                              (GHC.Show.showLitString
                                 b1
                                 (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 eta)))
                       GHC.Types.True
                       → GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.shows9
                           (GHC.Base.++
                              @ GHC.Types.Char
                              Graphics.WaveFront.Parsers.$fShowMTLNoParse4
                              (GHC.Types.:
                                 @ GHC.Types.Char
                                 GHC.Show.shows6
                                 (GHC.Show.showLitString
                                    b1
                                    (GHC.Types.:
                                       @ GHC.Types.Char
                                       GHC.Show.shows6
                                       (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta))))) } }
                   Graphics.WaveFront.Parsers.MTLNoParse b1
                   → case a1 of wild1 { GHC.Types.I# x →
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# x 11) of wild2 {
                       GHC.Types.False
                       → GHC.Base.++
                           @ GHC.Types.Char
                           Graphics.WaveFront.Parsers.$fShowMTLNoParse3
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.shows6
                              (GHC.Show.showLitString
                                 b1
                                 (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 eta)))
                       GHC.Types.True
                       → GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.shows9
                           (GHC.Base.++
                              @ GHC.Types.Char
                              Graphics.WaveFront.Parsers.$fShowMTLNoParse3
                              (GHC.Types.:
                                 @ GHC.Types.Char
                                 GHC.Show.shows6
                                 (GHC.Show.showLitString
                                    b1
                                    (GHC.Types.:
                                       @ GHC.Types.Char
                                       GHC.Show.shows6
                                       (GHC.Types.:
                                          @ GHC.Types.Char
                                          GHC.Show.shows8
                                          eta))))) } } }) -}
ebe92a8de69bd7cad10bd0c52e6f6e36
  $fShowMTLToken ∷ GHC.Show.Show Graphics.WaveFront.Parsers.MTLToken
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Graphics.WaveFront.Parsers.MTLToken
                  Graphics.WaveFront.Parsers.$fShowMTLToken_$cshowsPrec
                  Graphics.WaveFront.Parsers.$fShowMTLToken_$cshow
                  Graphics.WaveFront.Parsers.$fShowMTLToken_$cshowList -}
ebe92a8de69bd7cad10bd0c52e6f6e36
  $fShowMTLToken1 ∷
    Graphics.WaveFront.Parsers.MTLToken → GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w ∷ Graphics.WaveFront.Parsers.MTLToken →
                 Graphics.WaveFront.Parsers.$w$cshowsPrec1 0 w) -}
ebe92a8de69bd7cad10bd0c52e6f6e36
  $fShowMTLToken_$cshow ∷
    Graphics.WaveFront.Parsers.MTLToken → GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x ∷ Graphics.WaveFront.Parsers.MTLToken →
                 Graphics.WaveFront.Parsers.$fShowMTLToken_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
ebe92a8de69bd7cad10bd0c52e6f6e36
  $fShowMTLToken_$cshowList ∷
    [Graphics.WaveFront.Parsers.MTLToken] → GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Graphics.WaveFront.Parsers.MTLToken
                   Graphics.WaveFront.Parsers.$fShowMTLToken1) -}
ebe92a8de69bd7cad10bd0c52e6f6e36
  $fShowMTLToken_$cshowsPrec ∷
    GHC.Types.Int
    → Graphics.WaveFront.Parsers.MTLToken → GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><S,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w ∷ GHC.Types.Int w1 ∷ Graphics.WaveFront.Parsers.MTLToken →
                 case w of ww { GHC.Types.I# ww1 →
                 Graphics.WaveFront.Parsers.$w$cshowsPrec1 ww1 w1 }) -}
c4244a71a5cf6ef3e9c47f82f654d023
  $fShowMaterial ∷ GHC.Show.Show Graphics.WaveFront.Parsers.Material
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Graphics.WaveFront.Parsers.Material
                  Graphics.WaveFront.Parsers.$fShowMaterial_$cshowsPrec
                  Graphics.WaveFront.Parsers.$fShowMaterial_$cshow
                  Graphics.WaveFront.Parsers.$fShowMaterial_$cshowList -}
c4244a71a5cf6ef3e9c47f82f654d023
  $fShowMaterial1 ∷
    Graphics.WaveFront.Parsers.Material → GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w ∷ Graphics.WaveFront.Parsers.Material →
                 case w of ww { Graphics.WaveFront.Parsers.Material ww1 ww2 ww3 ww4 →
                 Graphics.WaveFront.Parsers.$w$cshowsPrec2 0 ww1 ww2 ww3 ww4 }) -}
c4244a71a5cf6ef3e9c47f82f654d023
  $fShowMaterial_$cshow ∷
    Graphics.WaveFront.Parsers.Material → GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(U(U(U),U(U),U(U),U(U)),U(U(U),U(U),U(U),U(U)),U(U(U),U(U),U(U),U(U)),1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x ∷ Graphics.WaveFront.Parsers.Material →
                 Graphics.WaveFront.Parsers.$fShowMaterial_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
c4244a71a5cf6ef3e9c47f82f654d023
  $fShowMaterial_$cshowList ∷
    [Graphics.WaveFront.Parsers.Material] → GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Graphics.WaveFront.Parsers.Material
                   Graphics.WaveFront.Parsers.$fShowMaterial1) -}
c4244a71a5cf6ef3e9c47f82f654d023
  $fShowMaterial_$cshowsPrec ∷
    GHC.Types.Int
    → Graphics.WaveFront.Parsers.Material → GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S,1*U(U)><S,1*U(U(U(U),U(U),U(U),U(U)),U(U(U),U(U),U(U),U(U)),U(U(U),U(U),U(U),U(U)),1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w ∷ GHC.Types.Int w1 ∷ Graphics.WaveFront.Parsers.Material →
                 case w of ww { GHC.Types.I# ww1 →
                 case w1 of ww2 { Graphics.WaveFront.Parsers.Material ww3 ww4 ww5 ww6 →
                 Graphics.WaveFront.Parsers.$w$cshowsPrec2
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6 } }) -}
eece558577291361beecbc7c33c65e86
  $fShowModel ∷ GHC.Show.Show Graphics.WaveFront.Parsers.Model
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Graphics.WaveFront.Parsers.Model
                  Graphics.WaveFront.Parsers.$fShowModel_$cshowsPrec
                  Graphics.WaveFront.Parsers.$fShowModel_$cshow
                  Graphics.WaveFront.Parsers.$fShowModel_$cshowList -}
eece558577291361beecbc7c33c65e86
  $fShowModel1 ∷ Graphics.WaveFront.Parsers.Model → GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w ∷ Graphics.WaveFront.Parsers.Model →
                 case w of ww { Graphics.WaveFront.Parsers.Model ww1 ww2 ww3 ww4 ww5 ww6 ww7 →
                 Graphics.WaveFront.Parsers.$w$cshowsPrec3
                   0
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7 }) -}
eece558577291361beecbc7c33c65e86
  $fShowModel_$cshow ∷
    Graphics.WaveFront.Parsers.Model → GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U,U,U,U,1*U,1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x ∷ Graphics.WaveFront.Parsers.Model →
                 Graphics.WaveFront.Parsers.$fShowModel_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
eece558577291361beecbc7c33c65e86
  $fShowModel_$cshowList ∷
    [Graphics.WaveFront.Parsers.Model] → GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Graphics.WaveFront.Parsers.Model
                   Graphics.WaveFront.Parsers.$fShowModel1) -}
eece558577291361beecbc7c33c65e86
  $fShowModel_$cshowsPrec ∷
    GHC.Types.Int → Graphics.WaveFront.Parsers.Model → GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><S,1*U(U,U,U,U,1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w ∷ GHC.Types.Int w1 ∷ Graphics.WaveFront.Parsers.Model →
                 case w of ww { GHC.Types.I# ww1 →
                 case w1 of ww2 { Graphics.WaveFront.Parsers.Model ww3 ww4 ww5 ww6 ww7 ww8 ww9 →
                 Graphics.WaveFront.Parsers.$w$cshowsPrec3
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9 } }) -}
fcb6b7c355442149a00aefc566dab17d
  $fShowOBJNoParse ∷
    GHC.Show.Show Graphics.WaveFront.Parsers.OBJNoParse
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Graphics.WaveFront.Parsers.OBJNoParse
                  Graphics.WaveFront.Parsers.$fShowOBJNoParse_$cshowsPrec
                  Graphics.WaveFront.Parsers.$fShowOBJNoParse_$cshow
                  Graphics.WaveFront.Parsers.$fShowOBJNoParse_$cshowList -}
fcb6b7c355442149a00aefc566dab17d
  $fShowOBJNoParse1 ∷
    Graphics.WaveFront.Parsers.OBJNoParse → GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (Graphics.WaveFront.Parsers.$fShowOBJNoParse_$cshowsPrec
                   Graphics.WaveFront.Parsers.$fShowMTLNoParse2) -}
428f5c0d1a20692b7e393d0c94ffa0ae
  $fShowOBJNoParse2 ∷ [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OBJNoParse "#) -}
553059c70fc9fb4aff57ba3f89486812
  $fShowOBJNoParse3 ∷ [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "OBJNoSuchAttribute "#) -}
2d05c0df5c68424fb7cc3e296a35cf66
  $fShowOBJNoParse4 ∷ [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OBJEmpty"#) -}
82189546cf94f2f177ea441287e54ae5
  $fShowOBJNoParse5 ∷ [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OBJComment "#) -}
fcb6b7c355442149a00aefc566dab17d
  $fShowOBJNoParse_$cshow ∷
    Graphics.WaveFront.Parsers.OBJNoParse → GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x ∷ Graphics.WaveFront.Parsers.OBJNoParse →
                 Graphics.WaveFront.Parsers.$fShowOBJNoParse_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
fcb6b7c355442149a00aefc566dab17d
  $fShowOBJNoParse_$cshowList ∷
    [Graphics.WaveFront.Parsers.OBJNoParse] → GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Graphics.WaveFront.Parsers.OBJNoParse
                   Graphics.WaveFront.Parsers.$fShowOBJNoParse1) -}
fcb6b7c355442149a00aefc566dab17d
  $fShowOBJNoParse_$cshowsPrec ∷
    GHC.Types.Int
    → Graphics.WaveFront.Parsers.OBJNoParse → GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ a1 ∷ GHC.Types.Int
                   ds ∷ Graphics.WaveFront.Parsers.OBJNoParse
                   eta ∷ GHC.Base.String →
                 case ds of wild {
                   Graphics.WaveFront.Parsers.OBJComment b1
                   → case a1 of wild1 { GHC.Types.I# x →
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# x 11) of wild2 {
                       GHC.Types.False
                       → GHC.Base.++
                           @ GHC.Types.Char
                           Graphics.WaveFront.Parsers.$fShowOBJNoParse5
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.shows6
                              (GHC.Show.showLitString
                                 b1
                                 (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 eta)))
                       GHC.Types.True
                       → GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.shows9
                           (GHC.Base.++
                              @ GHC.Types.Char
                              Graphics.WaveFront.Parsers.$fShowOBJNoParse5
                              (GHC.Types.:
                                 @ GHC.Types.Char
                                 GHC.Show.shows6
                                 (GHC.Show.showLitString
                                    b1
                                    (GHC.Types.:
                                       @ GHC.Types.Char
                                       GHC.Show.shows6
                                       (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta))))) } }
                   Graphics.WaveFront.Parsers.OBJEmpty
                   → GHC.Base.++
                       @ GHC.Types.Char
                       Graphics.WaveFront.Parsers.$fShowOBJNoParse4
                       eta
                   Graphics.WaveFront.Parsers.OBJNoSuchAttribute b1
                   → case a1 of wild1 { GHC.Types.I# x →
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# x 11) of wild2 {
                       GHC.Types.False
                       → GHC.Base.++
                           @ GHC.Types.Char
                           Graphics.WaveFront.Parsers.$fShowOBJNoParse3
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.shows6
                              (GHC.Show.showLitString
                                 b1
                                 (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 eta)))
                       GHC.Types.True
                       → GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.shows9
                           (GHC.Base.++
                              @ GHC.Types.Char
                              Graphics.WaveFront.Parsers.$fShowOBJNoParse3
                              (GHC.Types.:
                                 @ GHC.Types.Char
                                 GHC.Show.shows6
                                 (GHC.Show.showLitString
                                    b1
                                    (GHC.Types.:
                                       @ GHC.Types.Char
                                       GHC.Show.shows6
                                       (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta))))) } }
                   Graphics.WaveFront.Parsers.OBJNoParse b1
                   → case a1 of wild1 { GHC.Types.I# x →
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# x 11) of wild2 {
                       GHC.Types.False
                       → GHC.Base.++
                           @ GHC.Types.Char
                           Graphics.WaveFront.Parsers.$fShowOBJNoParse2
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.shows6
                              (GHC.Show.showLitString
                                 b1
                                 (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 eta)))
                       GHC.Types.True
                       → GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.shows9
                           (GHC.Base.++
                              @ GHC.Types.Char
                              Graphics.WaveFront.Parsers.$fShowOBJNoParse2
                              (GHC.Types.:
                                 @ GHC.Types.Char
                                 GHC.Show.shows6
                                 (GHC.Show.showLitString
                                    b1
                                    (GHC.Types.:
                                       @ GHC.Types.Char
                                       GHC.Show.shows6
                                       (GHC.Types.:
                                          @ GHC.Types.Char
                                          GHC.Show.shows8
                                          eta))))) } } }) -}
631a814f3e280c0b87d2b54c21ec6703
  $fShowOBJToken ∷ GHC.Show.Show Graphics.WaveFront.Parsers.OBJToken
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Graphics.WaveFront.Parsers.OBJToken
                  Graphics.WaveFront.Parsers.$fShowOBJToken_$cshowsPrec
                  Graphics.WaveFront.Parsers.$fShowOBJToken_$cshow
                  Graphics.WaveFront.Parsers.$fShowOBJToken_$cshowList -}
631a814f3e280c0b87d2b54c21ec6703
  $fShowOBJToken1 ∷
    Graphics.WaveFront.Parsers.OBJToken → GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w ∷ Graphics.WaveFront.Parsers.OBJToken →
                 Graphics.WaveFront.Parsers.$w$cshowsPrec4 0 w) -}
631a814f3e280c0b87d2b54c21ec6703
  $fShowOBJToken_$cshow ∷
    Graphics.WaveFront.Parsers.OBJToken → GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x ∷ Graphics.WaveFront.Parsers.OBJToken →
                 Graphics.WaveFront.Parsers.$fShowOBJToken_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
631a814f3e280c0b87d2b54c21ec6703
  $fShowOBJToken_$cshowList ∷
    [Graphics.WaveFront.Parsers.OBJToken] → GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Graphics.WaveFront.Parsers.OBJToken
                   Graphics.WaveFront.Parsers.$fShowOBJToken1) -}
631a814f3e280c0b87d2b54c21ec6703
  $fShowOBJToken_$cshowsPrec ∷
    GHC.Types.Int
    → Graphics.WaveFront.Parsers.OBJToken → GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><S,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w ∷ GHC.Types.Int w1 ∷ Graphics.WaveFront.Parsers.OBJToken →
                 case w of ww { GHC.Types.I# ww1 →
                 Graphics.WaveFront.Parsers.$w$cshowsPrec4 ww1 w1 }) -}
3b1779daaa7111453d327c36a72d9d4d
  $s$fShow(,) ∷ GHC.Show.Show (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Types.Int, GHC.Types.Int)
                  (GHC.Show.$fShow(,)_$cshowsPrec
                     @ GHC.Types.Int
                     @ GHC.Types.Int
                     GHC.Show.$fShowInt
                     GHC.Show.$fShowInt)
                  Graphics.WaveFront.Parsers.$s$fShow(,)_$s$fShow(,)_$cshow
                  Graphics.WaveFront.Parsers.$s$fShow(,)_$s$fShow(,)_$cshowList -}
5802f957786f46639b1b47746269ffe1
  $s$fShow(,)_$s$fShow(,)_$cshow ∷
    (GHC.Types.Int, GHC.Types.Int) → GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(1*U(U),U(U))>m2,
     Unfolding: InlineRule (1, True, False)
                (\ x ∷ (GHC.Types.Int, GHC.Types.Int) →
                 GHC.Show.$fShow(,)_$cshowsPrec
                   @ GHC.Types.Int
                   @ GHC.Types.Int
                   GHC.Show.$fShowInt
                   GHC.Show.$fShowInt
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
02626072eb288faef18cc474f034995b
  $s$fShow(,)_$s$fShow(,)_$cshowList ∷
    [(GHC.Types.Int, GHC.Types.Int)] → GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta ∷ [(GHC.Types.Int, GHC.Types.Int)] eta1 ∷ GHC.Base.String →
                 GHC.Show.showList__
                   @ (GHC.Types.Int, GHC.Types.Int)
                   (GHC.Show.$fShow(,)_$cshowsPrec
                      @ GHC.Types.Int
                      @ GHC.Types.Int
                      GHC.Show.$fShowInt
                      GHC.Show.$fShowInt
                      GHC.Show.shows18)
                   eta
                   eta1) -}
20714d46806a593b4da1e53c285f14d8
  $s$fShowMap ∷
    GHC.Show.Show
      (Data.Map.Base.Map
         [GHC.Types.Char] Graphics.WaveFront.Parsers.Material)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Map.Base.Map
                       [GHC.Types.Char] Graphics.WaveFront.Parsers.Material)
                  (Data.Map.Base.$fShowMap_$cshowsPrec
                     @ [GHC.Types.Char]
                     @ Graphics.WaveFront.Parsers.Material
                     Graphics.WaveFront.Parsers.$s$fShowMap3
                     Graphics.WaveFront.Parsers.$fShowMaterial)
                  (Data.Map.Base.$fShowMap_$cshow
                     @ [GHC.Types.Char]
                     @ Graphics.WaveFront.Parsers.Material
                     Graphics.WaveFront.Parsers.$s$fShowMap3
                     Graphics.WaveFront.Parsers.$fShowMaterial)
                  Graphics.WaveFront.Parsers.$s$fShowMap1 -}
53723db7c0069fd1d6476bd20d9444f7
  $s$fShowMap1 ∷
    [Data.Map.Base.Map
       [GHC.Types.Char] Graphics.WaveFront.Parsers.Material]
    → GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ ls ∷ [Data.Map.Base.Map
                           [GHC.Types.Char] Graphics.WaveFront.Parsers.Material]
                   s ∷ GHC.Base.String →
                 GHC.Show.showList__
                   @ (Data.Map.Base.Map
                        [GHC.Types.Char] Graphics.WaveFront.Parsers.Material)
                   Graphics.WaveFront.Parsers.$s$fShowMap2
                   ls
                   s) -}
31f4e56f2679f42eb956939eb9ad6cec
  $s$fShowMap2 ∷
    Data.Map.Base.Map
      [GHC.Types.Char] Graphics.WaveFront.Parsers.Material
    → GHC.Show.ShowS
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ w3 ∷ Data.Map.Base.Map
                          [GHC.Types.Char] Graphics.WaveFront.Parsers.Material →
                 Data.Map.Base.$w$cshowsPrec
                   @ [GHC.Types.Char]
                   @ Graphics.WaveFront.Parsers.Material
                   GHC.Show.$fShow[]_$s$fShow[]1
                   Graphics.WaveFront.Parsers.$fShowMaterial
                   0
                   w3) -}
945a02eb46912dba588abd2d475fa9e8
  $s$fShowMap3 ∷ GHC.Show.Show GHC.Base.String
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GHC.Show.$fShow[]_$s$fShow[]1 -}
8ca7bd4c3cc870acac82f478927bd4f2
  $sfromList ∷ [GHC.Base.String] → Data.Set.Base.Set GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ ds ∷ [GHC.Base.String] →
                 case ds of wild {
                   [] → Data.Set.Base.Tip @ GHC.Base.String
                   : x ds1
                   → case ds1 of wild1 {
                       []
                       → case x of dt { DEFAULT →
                         Data.Set.Base.Bin
                           @ GHC.Base.String
                           1
                           dt
                           (Data.Set.Base.Tip @ GHC.Base.String)
                           (Data.Set.Base.Tip @ GHC.Base.String) }
                       : ipv ipv1
                       → case GHC.Classes.$fOrd[]_$s$ccompare1 x ipv of wild2 {
                           DEFAULT
                           → case x of dt { DEFAULT →
                             Graphics.WaveFront.Parsers.$sfromList_go5
                               (Data.Set.Base.Bin
                                  @ GHC.Base.String
                                  1
                                  dt
                                  (Data.Set.Base.Tip @ GHC.Base.String)
                                  (Data.Set.Base.Tip @ GHC.Base.String))
                               wild1 }
                           GHC.Types.LT
                           → case x of dt { DEFAULT →
                             Graphics.WaveFront.Parsers.$wgo5
                               1
                               (Data.Set.Base.Bin
                                  @ GHC.Base.String
                                  1
                                  dt
                                  (Data.Set.Base.Tip @ GHC.Base.String)
                                  (Data.Set.Base.Tip @ GHC.Base.String))
                               wild1 } } } }) -}
78179dbef02828940dde9fc5836f6ff1
  $sfromList1 ∷
    [([GHC.Base.String], a)] → Data.Map.Base.Map [GHC.Base.String] a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a1 ds ∷ [([GHC.Base.String], a1)] →
                 case ds of wild {
                   [] → Data.Map.Base.Tip @ [GHC.Base.String] @ a1
                   : ds1 ds2
                   → case ds1 of wild1 { (,) kx x →
                     case ds2 of wild2 {
                       []
                       → case kx of dt { DEFAULT →
                         Data.Map.Base.Bin
                           @ [GHC.Base.String]
                           @ a1
                           1
                           dt
                           x
                           (Data.Map.Base.Tip @ [GHC.Base.String] @ a1)
                           (Data.Map.Base.Tip @ [GHC.Base.String] @ a1) }
                       : ipv ipv1
                       → case ipv of wild3 { (,) ky ds3 →
                         case GHC.Classes.$fOrd[]_$s$ccompare2 kx ky of wild4 {
                           DEFAULT
                           → case kx of dt { DEFAULT →
                             Graphics.WaveFront.Parsers.$sfromList2
                               @ a1
                               (Data.Map.Base.Bin
                                  @ [GHC.Base.String]
                                  @ a1
                                  1
                                  dt
                                  x
                                  (Data.Map.Base.Tip @ [GHC.Base.String] @ a1)
                                  (Data.Map.Base.Tip @ [GHC.Base.String] @ a1))
                               wild2 }
                           GHC.Types.LT
                           → case kx of dt { DEFAULT →
                             Graphics.WaveFront.Parsers.$wpoly_go10
                               @ a1
                               1
                               (Data.Map.Base.Bin
                                  @ [GHC.Base.String]
                                  @ a1
                                  1
                                  dt
                                  x
                                  (Data.Map.Base.Tip @ [GHC.Base.String] @ a1)
                                  (Data.Map.Base.Tip @ [GHC.Base.String] @ a1))
                               wild2 } } } } } }) -}
7eb4ac4502e668b769ccc9ee180aa60e
  $sfromList2 ∷
    Data.Map.Base.Map [GHC.Base.String] a1
    → [([GHC.Base.String], a1)]
    → Data.Map.Base.Map [GHC.Base.String] a1
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
971ed41dad4061df4aba6c4ea67f698e
  $sfromList3 ∷
    [(GHC.Base.String, a)] → Data.Map.Base.Map GHC.Base.String a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a1 ds ∷ [(GHC.Base.String, a1)] →
                 case ds of wild {
                   [] → Data.Map.Base.Tip @ GHC.Base.String @ a1
                   : ds1 ds2
                   → case ds1 of wild1 { (,) kx x →
                     case ds2 of wild2 {
                       []
                       → case kx of dt { DEFAULT →
                         Data.Map.Base.Bin
                           @ GHC.Base.String
                           @ a1
                           1
                           dt
                           x
                           (Data.Map.Base.Tip @ GHC.Base.String @ a1)
                           (Data.Map.Base.Tip @ GHC.Base.String @ a1) }
                       : ipv ipv1
                       → case ipv of wild3 { (,) ky ds3 →
                         case GHC.Classes.$fOrd[]_$s$ccompare1 kx ky of wild4 {
                           DEFAULT
                           → case kx of dt { DEFAULT →
                             Graphics.WaveFront.Parsers.$sfromList4
                               @ a1
                               (Data.Map.Base.Bin
                                  @ GHC.Base.String
                                  @ a1
                                  1
                                  dt
                                  x
                                  (Data.Map.Base.Tip @ GHC.Base.String @ a1)
                                  (Data.Map.Base.Tip @ GHC.Base.String @ a1))
                               wild2 }
                           GHC.Types.LT
                           → case kx of dt { DEFAULT →
                             Graphics.WaveFront.Parsers.$wpoly_go1
                               @ a1
                               1
                               (Data.Map.Base.Bin
                                  @ GHC.Base.String
                                  @ a1
                                  1
                                  dt
                                  x
                                  (Data.Map.Base.Tip @ GHC.Base.String @ a1)
                                  (Data.Map.Base.Tip @ GHC.Base.String @ a1))
                               wild2 } } } } } }) -}
ef323a5abbdb84ccd37bf5dd21838638
  $sfromList4 ∷
    Data.Map.Base.Map GHC.Base.String a1
    → [(GHC.Base.String, a1)] → Data.Map.Base.Map GHC.Base.String a1
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
2b608e733e0b920af3ad55b27666eff4
  $sfromList_go5 ∷
    Data.Set.Base.Set GHC.Base.String
    → [GHC.Base.String] → Data.Set.Base.Set GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
07470e632207c28ee6adb417dc935ccf
  $sinsert_$sgo1 ∷
    GHC.Base.String
    → a1
    → Data.Map.Base.Map GHC.Base.String a1
    → Data.Map.Base.Map GHC.Base.String a1
  {- Arity: 3, Strictness: <S,1*U><L,U><S,1*U> -}
b10b2a6e64085fd0be97018c093455da
  $sinsert_$sgo10 ∷
    [GHC.Base.String]
    → a1
    → Data.Map.Base.Map [GHC.Base.String] a1
    → Data.Map.Base.Map [GHC.Base.String] a1
  {- Arity: 3, Strictness: <S,1*U><L,U><S,1*U> -}
b736f7035c8dae9bccc08e8d814dea53
  $sinsert_$sgo5 ∷
    GHC.Base.String
    → Data.Set.Base.Set GHC.Base.String
    → Data.Set.Base.Set GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
34bce0977c69019a8d6a6a98c20a3c2f
  $slookup1 ∷
    GHC.Base.String
    → Data.Map.Base.Map GHC.Base.String a → GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
22f2ac52341935907aa261db94dbad55
  $w$cshowsPrec ∷
    GHC.Prim.Int#
    → [(GHC.Types.Int,
        GHC.Base.Maybe GHC.Types.Int,
        GHC.Base.Maybe GHC.Types.Int)]
    → Graphics.WaveFront.Parsers.Material
    → GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,U><L,U><L,1*U(U(U(U),U(U),U(U),U(U)),U(U(U),U(U),U(U),U(U)),U(U(U),U(U),U(U),U(U)),1*U)>,
     Inline: [0] -}
ebe92a8de69bd7cad10bd0c52e6f6e36
  $w$cshowsPrec1 ∷
    GHC.Prim.Int#
    → Graphics.WaveFront.Parsers.MTLToken → GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0] -}
f1306e0c01793d83d8f72bc525fd6c74
  $w$cshowsPrec2 ∷
    GHC.Prim.Int#
    → Graphics.WaveFront.Parsers.Colour
    → Graphics.WaveFront.Parsers.Colour
    → Graphics.WaveFront.Parsers.Colour
    → GHC.Base.Maybe GHC.Base.String
    → GHC.Show.ShowS
  {- Arity: 5,
     Strictness: <L,U><L,U(U(U),U(U),U(U),U(U))><L,U(U(U),U(U),U(U),U(U))><L,U(U(U),U(U),U(U),U(U))><L,1*U>,
     Inline: [0] -}
60bcbe1b72db3ba274a57328c0c14adc
  $w$cshowsPrec3 ∷
    GHC.Prim.Int#
    → [Graphics.WaveFront.Parsers.Vector GHC.Types.Float]
    → [Graphics.WaveFront.Parsers.Vector GHC.Types.Float]
    → [Graphics.WaveFront.Parsers.Point GHC.Types.Float]
    → [Graphics.WaveFront.Parsers.Face]
    → Graphics.WaveFront.Parsers.MTLTable
    → Data.Map.Base.Map
        [GHC.Base.String] (GHC.Types.Int, GHC.Types.Int)
    → Data.Map.Base.Map
        [GHC.Base.String] (GHC.Types.Int, GHC.Types.Int)
    → GHC.Show.ShowS
  {- Arity: 8,
     Strictness: <L,U><L,U><L,U><L,U><L,U><L,1*U><L,1*U><L,1*U>,
     Inline: [0] -}
631a814f3e280c0b87d2b54c21ec6703
  $w$cshowsPrec4 ∷
    GHC.Prim.Int#
    → Graphics.WaveFront.Parsers.OBJToken → GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0] -}
ea2d940a793b9d9aacf4cade5c623bd0
  $wa ∷
    Graphics.WaveFront.Parsers.MTLTable
    → [GHC.Base.Maybe GHC.Base.String]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ ww ∷ Graphics.WaveFront.Parsers.MTLTable →
                 Graphics.WaveFront.Parsers.hasTextures_go10
                   (GHC.Types.[] @ (GHC.Base.Maybe GHC.Base.String))
                   ww) -}
464f1e53e2b256ed964262a1080c5ec4
  $wboundingbox ∷
    Graphics.WaveFront.Parsers.Model
    → (# GHC.Types.Float,
         GHC.Types.Float,
         GHC.Types.Float,
         GHC.Types.Float,
         GHC.Types.Float,
         GHC.Types.Float #)
  {- Arity: 1, Strictness: <L,U(U,A,A,A,A,A,A)>, Inline: [0] -}
543238dbfdc1c09e977708d7467ea92c
  $wcreateModel ∷
    Graphics.WaveFront.Parsers.OBJ
    → Graphics.WaveFront.Parsers.MTLTable
    → (# [Graphics.WaveFront.Parsers.Vector GHC.Types.Float],
         [Graphics.WaveFront.Parsers.Vector GHC.Types.Float],
         [Graphics.WaveFront.Parsers.Point GHC.Types.Float],
         [Graphics.WaveFront.Parsers.Face],
         Graphics.WaveFront.Parsers.MTLTable,
         Data.Map.Base.Map [GHC.Base.String] (GHC.Types.Int, GHC.Types.Int),
         Data.Map.Base.Map
           [GHC.Base.String] (GHC.Types.Int, GHC.Types.Int) #)
  {- Arity: 2, Strictness: <L,1*U><L,U>, Inline: [0],
     Unfolding: (\ w ∷ Graphics.WaveFront.Parsers.OBJ
                   w1 ∷ Graphics.WaveFront.Parsers.MTLTable →
                 let {
                   modeldata ∷ [Graphics.WaveFront.Parsers.OBJToken]
                   = Data.Either.rights1
                       @ Graphics.WaveFront.Parsers.OBJNoParse
                       @ Graphics.WaveFront.Parsers.OBJToken
                       (GHC.Base.map
                          @ (GHC.Types.Int,
                             Data.Either.Either
                               Graphics.WaveFront.Parsers.OBJNoParse
                               Graphics.WaveFront.Parsers.OBJToken,
                             GHC.Base.String)
                          @ (Data.Either.Either
                               Graphics.WaveFront.Parsers.OBJNoParse
                               Graphics.WaveFront.Parsers.OBJToken)
                          (Graphics.WaveFront.Utilities.second
                             @ GHC.Types.Int
                             @ (Data.Either.Either
                                  Graphics.WaveFront.Parsers.OBJNoParse
                                  Graphics.WaveFront.Parsers.OBJToken)
                             @ GHC.Base.String)
                          w)
                 } in
                 (# Graphics.WaveFront.Parsers.createModel_go2 modeldata,
                    Graphics.WaveFront.Parsers.createModel_go1 modeldata,
                    Graphics.WaveFront.Parsers.createModel_go modeldata,
                    GHC.Base.map
                      @ Graphics.WaveFront.Parsers.Face
                      @ Graphics.WaveFront.Parsers.Face
                      Graphics.WaveFront.Parsers.tessellate
                      (Data.Either.rights1
                         @ GHC.Base.String
                         @ Graphics.WaveFront.Parsers.Face
                         (Graphics.WaveFront.Parsers.facesOf modeldata w1)),
                    w1,
                    Graphics.WaveFront.Parsers.buildIndexMapWith
                      (GHC.List.filter
                         @ Graphics.WaveFront.Parsers.OBJToken
                         Graphics.WaveFront.Parsers.createModel_notObject
                         modeldata),
                    Graphics.WaveFront.Parsers.buildIndexMapWith
                      (GHC.List.filter
                         @ Graphics.WaveFront.Parsers.OBJToken
                         Graphics.WaveFront.Parsers.createModel_notGroup
                         modeldata) #)) -}
4713e13763bcba253711db1e0b8d10b5
  $wgo ∷
    [Graphics.WaveFront.Parsers.OBJToken]
    → GHC.Types.Int
    → [([GHC.Base.String], GHC.Types.Int)]
    → (# GHC.Types.Int, [([GHC.Base.String], GHC.Types.Int)] #)
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,U(U)><L,U>,
     Inline: [0] -}
4b21a31d9c4ae0d956ee6dab2e257722
  $wgo5 ∷
    GHC.Prim.Int#
    → Data.Set.Base.Set GHC.Base.String
    → [GHC.Base.String]
    → Data.Set.Base.Set GHC.Base.String
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
f253313b4262abdb7604d251575eaeed
  $wmodelAttributes ∷
    [Graphics.WaveFront.Parsers.Vector GHC.Types.Float]
    → [Graphics.WaveFront.Parsers.Vector GHC.Types.Float]
    → [Graphics.WaveFront.Parsers.Point GHC.Types.Float]
    → [Graphics.WaveFront.Parsers.Face]
    → (# Graphics.WaveFront.Parsers.Vertices,
         Graphics.WaveFront.Parsers.TexCoords,
         Graphics.WaveFront.Parsers.Normals,
         Graphics.WaveFront.Parsers.Materials #)
  {- Arity: 4, Strictness: <L,U><L,U><L,U><S,1*U>, Inline: [0],
     Unfolding: (\ ww ∷ [Graphics.WaveFront.Parsers.Vector
                           GHC.Types.Float]
                   ww1 ∷ [Graphics.WaveFront.Parsers.Vector GHC.Types.Float]
                   ww2 ∷ [Graphics.WaveFront.Parsers.Point GHC.Types.Float]
                   ww3 ∷ [Graphics.WaveFront.Parsers.Face] →
                 letrec {
                   go4 ∷ [Graphics.WaveFront.Parsers.Face]
                         → [(Graphics.WaveFront.Parsers.Vector GHC.Types.Float,
                             GHC.Base.Maybe (Graphics.WaveFront.Parsers.Point GHC.Types.Float),
                             GHC.Base.Maybe (Graphics.WaveFront.Parsers.Vector GHC.Types.Float),
                             Graphics.WaveFront.Parsers.Material)]
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ ds ∷ [Graphics.WaveFront.Parsers.Face] →
                     case ds of wild {
                       []
                       → GHC.Types.[]
                           @ (Graphics.WaveFront.Parsers.Vector GHC.Types.Float,
                              GHC.Base.Maybe (Graphics.WaveFront.Parsers.Point GHC.Types.Float),
                              GHC.Base.Maybe (Graphics.WaveFront.Parsers.Vector GHC.Types.Float),
                              Graphics.WaveFront.Parsers.Material)
                       : y ys
                       → case y of wild1 { Graphics.WaveFront.Parsers.Face ds1 ds2 →
                         let {
                           z2 ∷ [(Graphics.WaveFront.Parsers.Vector GHC.Types.Float,
                                  GHC.Base.Maybe (Graphics.WaveFront.Parsers.Point GHC.Types.Float),
                                  GHC.Base.Maybe
                                    (Graphics.WaveFront.Parsers.Vector GHC.Types.Float),
                                  Graphics.WaveFront.Parsers.Material)]
                           = go4 ys
                         } in
                         letrec {
                           go5 ∷ [(GHC.Types.Int,
                                   GHC.Base.Maybe GHC.Types.Int,
                                   GHC.Base.Maybe GHC.Types.Int)]
                                 → [(Graphics.WaveFront.Parsers.Vector GHC.Types.Float,
                                     GHC.Base.Maybe
                                       (Graphics.WaveFront.Parsers.Point GHC.Types.Float),
                                     GHC.Base.Maybe
                                       (Graphics.WaveFront.Parsers.Vector GHC.Types.Float),
                                     Graphics.WaveFront.Parsers.Material)]
                             {- Arity: 1, Strictness: <S,1*U> -}
                           = \ ds3 ∷ [(GHC.Types.Int,
                                       GHC.Base.Maybe GHC.Types.Int,
                                       GHC.Base.Maybe GHC.Types.Int)] →
                             case ds3 of wild2 {
                               [] → z2
                               : y1 ys1
                               → GHC.Types.:
                                   @ (Graphics.WaveFront.Parsers.Vector GHC.Types.Float,
                                      GHC.Base.Maybe
                                        (Graphics.WaveFront.Parsers.Point GHC.Types.Float),
                                      GHC.Base.Maybe
                                        (Graphics.WaveFront.Parsers.Vector GHC.Types.Float),
                                      Graphics.WaveFront.Parsers.Material)
                                   (case y1 of wild3 { (,,) vi ti ni →
                                    (case vi of wild4 { GHC.Types.I# x →
                                     GHC.List.$w!!
                                       @ (Graphics.WaveFront.Parsers.Vector GHC.Types.Float)
                                       ww
                                       (GHC.Prim.-# x 1) },
                                     case ti of wild4 {
                                       GHC.Base.Nothing
                                       → GHC.Base.Nothing @ (GHC.Types.Float, GHC.Types.Float)
                                       GHC.Base.Just a1
                                       → GHC.Base.Just
                                           @ (GHC.Types.Float, GHC.Types.Float)
                                           (case a1 of wild5 { GHC.Types.I# x →
                                            GHC.List.$w!!
                                              @ (Graphics.WaveFront.Parsers.Point GHC.Types.Float)
                                              ww2
                                              (GHC.Prim.-# x 1) }) },
                                     case ni of wild4 {
                                       GHC.Base.Nothing
                                       → GHC.Base.Nothing
                                           @ (GHC.Types.Float, GHC.Types.Float, GHC.Types.Float)
                                       GHC.Base.Just a1
                                       → GHC.Base.Just
                                           @ (GHC.Types.Float, GHC.Types.Float, GHC.Types.Float)
                                           (case a1 of wild5 { GHC.Types.I# x →
                                            GHC.List.$w!!
                                              @ (Graphics.WaveFront.Parsers.Vector GHC.Types.Float)
                                              ww1
                                              (GHC.Prim.-# x 1) }) },
                                     ds2) })
                                   (go5 ys1) }
                         } in
                         go5 ds1 } }
                 } in
                 Data.OldList.unzip1
                   @ (Graphics.WaveFront.Parsers.Vector GHC.Types.Float)
                   @ (GHC.Base.Maybe
                        (Graphics.WaveFront.Parsers.Point GHC.Types.Float))
                   @ (GHC.Base.Maybe
                        (Graphics.WaveFront.Parsers.Vector GHC.Types.Float))
                   @ Graphics.WaveFront.Parsers.Material
                   (go4 ww3)) -}
128624384b36a46bd160ddebf15b71ad
  $wparseMTLRow ∷
    GHC.Base.String
    → GHC.Types.Int
    → (# GHC.Types.Int,
         Data.Either.Either
           Graphics.WaveFront.Parsers.MTLNoParse
           Graphics.WaveFront.Parsers.MTLToken,
         GHC.Base.String #)
  {- Arity: 2, Strictness: <S,1*U><L,U>, Inline: [0] -}
074a3045955277fa3e4fa510cea3af46
  $wparseOBJRow ∷
    GHC.Base.String
    → GHC.Types.Int
    → (# GHC.Types.Int,
         Data.Either.Either
           Graphics.WaveFront.Parsers.OBJNoParse
           Graphics.WaveFront.Parsers.OBJToken,
         GHC.Base.String #)
  {- Arity: 2, Strictness: <S,1*U><L,U>, Inline: [0] -}
69f613640c4f5c2e61c4f585e7930282
  $wpoly_go1 ∷
    GHC.Prim.Int#
    → Data.Map.Base.Map GHC.Base.String a
    → [(GHC.Base.String, a)]
    → Data.Map.Base.Map GHC.Base.String a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
aa01fa9fe4f1b096307eae8152832e92
  $wpoly_go10 ∷
    GHC.Prim.Int#
    → Data.Map.Base.Map [GHC.Base.String] a
    → [([GHC.Base.String], a)]
    → Data.Map.Base.Map [GHC.Base.String] a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
bc83dcfe21b07b3974a8b18f20a3507f
  $wtessellate ∷
    [(GHC.Types.Int,
      GHC.Base.Maybe GHC.Types.Int,
      GHC.Base.Maybe GHC.Types.Int)]
    → Graphics.WaveFront.Parsers.Material
    → (# [(GHC.Types.Int,
           GHC.Base.Maybe GHC.Types.Int,
           GHC.Base.Maybe GHC.Types.Int)],
         Graphics.WaveFront.Parsers.Material #)
  {- Arity: 2, Strictness: <L,1*U><L,U>, Inline: [0],
     Unfolding: (\ ww ∷ [(GHC.Types.Int,
                          GHC.Base.Maybe GHC.Types.Int,
                          GHC.Base.Maybe GHC.Types.Int)]
                   ww1 ∷ Graphics.WaveFront.Parsers.Material →
                 (# case ww of wild {
                      [] → Graphics.WaveFront.Parsers.tessellate1
                      : a1 rest
                      → letrec {
                          go4 ∷ [(GHC.Types.Int,
                                  GHC.Base.Maybe GHC.Types.Int,
                                  GHC.Base.Maybe GHC.Types.Int)]
                                → [(GHC.Types.Int,
                                    GHC.Base.Maybe GHC.Types.Int,
                                    GHC.Base.Maybe GHC.Types.Int)]
                                → [(GHC.Types.Int,
                                    GHC.Base.Maybe GHC.Types.Int,
                                    GHC.Base.Maybe GHC.Types.Int)]
                            {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
                          = \ ds ∷ [(GHC.Types.Int,
                                     GHC.Base.Maybe GHC.Types.Int,
                                     GHC.Base.Maybe GHC.Types.Int)]
                              _ys ∷ [(GHC.Types.Int,
                                      GHC.Base.Maybe GHC.Types.Int,
                                      GHC.Base.Maybe GHC.Types.Int)] →
                            case ds of wild1 {
                              []
                              → GHC.Types.[]
                                  @ (GHC.Types.Int,
                                     GHC.Base.Maybe GHC.Types.Int,
                                     GHC.Base.Maybe GHC.Types.Int)
                              : ipv ipv1
                              → case _ys of wild2 {
                                  []
                                  → GHC.Types.[]
                                      @ (GHC.Types.Int,
                                         GHC.Base.Maybe GHC.Types.Int,
                                         GHC.Base.Maybe GHC.Types.Int)
                                  : ipv2 ipv3
                                  → GHC.Base.++
                                      @ (GHC.Types.Int,
                                         GHC.Base.Maybe GHC.Types.Int,
                                         GHC.Base.Maybe GHC.Types.Int)
                                      (GHC.Types.:
                                         @ (GHC.Types.Int,
                                            GHC.Base.Maybe GHC.Types.Int,
                                            GHC.Base.Maybe GHC.Types.Int)
                                         a1
                                         (GHC.Types.:
                                            @ (GHC.Types.Int,
                                               GHC.Base.Maybe GHC.Types.Int,
                                               GHC.Base.Maybe GHC.Types.Int)
                                            ipv
                                            (GHC.Types.:
                                               @ (GHC.Types.Int,
                                                  GHC.Base.Maybe GHC.Types.Int,
                                                  GHC.Base.Maybe GHC.Types.Int)
                                               ipv2
                                               (GHC.Types.[]
                                                  @ (GHC.Types.Int,
                                                     GHC.Base.Maybe GHC.Types.Int,
                                                     GHC.Base.Maybe GHC.Types.Int)))))
                                      (go4 ipv1 ipv3) } }
                        } in
                        go4
                          rest
                          (Graphics.WaveFront.Utilities.$wunsafeDrop1
                             @ (GHC.Types.Int,
                                GHC.Base.Maybe GHC.Types.Int,
                                GHC.Base.Maybe GHC.Types.Int)
                             1
                             rest) },
                    ww1 #)) -}
31ac52a287b17d5432bef6cc6ddb5daf
  data BoundingBox n
    = BoundingBox {left ∷ n,
                   right ∷ n,
                   top ∷ n,
                   bottom ∷ n,
                   front ∷ n,
                   back ∷ n}
    Promotable
1e2ae05cdb8279e556bb27dca9409dd9
  type Colour =
    (GHC.Types.Float,
     GHC.Types.Float,
     GHC.Types.Float,
     GHC.Types.Float)
f6d4806d9e59a4057a9ccebd135e5350
  data Face
    = Face {indices ∷ [(GHC.Types.Int,
                        GHC.Base.Maybe GHC.Types.Int,
                        GHC.Base.Maybe GHC.Types.Int)],
            material ∷ Graphics.WaveFront.Parsers.Material}
9502e7315aafc191271c475bc7b7b3cf
  type MTL = [Graphics.WaveFront.Parsers.MTLRow]
cf47180994ba8f7eeebbf85544a19624
  data MTLNoParse
    = MTLComment GHC.Base.String
    | MTLEmpty
    | MTLNoSuchAttribute GHC.Base.String
    | MTLNoParse GHC.Base.String
0b7d79c82473440e4e1f09a4a2cc568b
  type MTLRow =
    (GHC.Types.Int,
     Data.Either.Either
       Graphics.WaveFront.Parsers.MTLNoParse
       Graphics.WaveFront.Parsers.MTLToken,
     GHC.Base.String)
ba3daf33e18bf3a311540791991429bc
  type MTLTable =
    Data.Map.Base.Map
      GHC.Base.String
      (Data.Map.Base.Map
         GHC.Base.String Graphics.WaveFront.Parsers.Material)
ebe92a8de69bd7cad10bd0c52e6f6e36
  data MTLToken
    = Ambient GHC.Types.Float
              GHC.Types.Float
              GHC.Types.Float
              (GHC.Base.Maybe GHC.Types.Float)
    | Diffuse GHC.Types.Float
              GHC.Types.Float
              GHC.Types.Float
              (GHC.Base.Maybe GHC.Types.Float)
    | Specular GHC.Types.Float
               GHC.Types.Float
               GHC.Types.Float
               (GHC.Base.Maybe GHC.Types.Float)
    | MapDiffuse GHC.Base.String
    | NewMaterial GHC.Base.String
c4244a71a5cf6ef3e9c47f82f654d023
  data Material
    = Material {ambient ∷ Graphics.WaveFront.Parsers.Colour,
                diffuse ∷ Graphics.WaveFront.Parsers.Colour,
                specular ∷ Graphics.WaveFront.Parsers.Colour,
                texture ∷ GHC.Base.Maybe GHC.Base.String}
6d9fdf669761f1be09f60267e606aa90
  type Materials = [Graphics.WaveFront.Parsers.Material]
eece558577291361beecbc7c33c65e86
  data Model
    = Model {vertices ∷ [Graphics.WaveFront.Parsers.Vector
                           GHC.Types.Float],
             normals ∷ [Graphics.WaveFront.Parsers.Vector GHC.Types.Float],
             texcoords ∷ [Graphics.WaveFront.Parsers.Point GHC.Types.Float],
             faces ∷ [Graphics.WaveFront.Parsers.Face],
             materials ∷ Graphics.WaveFront.Parsers.MTLTable,
             groups ∷ Data.Map.Base.Map
                        [GHC.Base.String] (GHC.Types.Int, GHC.Types.Int),
             objects ∷ Data.Map.Base.Map
                         [GHC.Base.String] (GHC.Types.Int, GHC.Types.Int)}
c2d605a4e7fda50e686060df67eb7878
  type Normals =
    [GHC.Base.Maybe
       (Graphics.WaveFront.Parsers.Vector GHC.Types.Float)]
9e24bfddf2950589436094f3027f0702
  type OBJ = [Graphics.WaveFront.Parsers.OBJRow]
fcb6b7c355442149a00aefc566dab17d
  data OBJNoParse
    = OBJComment GHC.Base.String
    | OBJEmpty
    | OBJNoSuchAttribute GHC.Base.String
    | OBJNoParse GHC.Base.String
2bf4e7f4694efdfef877d8ad68762020
  type OBJRow =
    (GHC.Types.Int,
     Data.Either.Either
       Graphics.WaveFront.Parsers.OBJNoParse
       Graphics.WaveFront.Parsers.OBJToken,
     GHC.Base.String)
631a814f3e280c0b87d2b54c21ec6703
  data OBJToken
    = OBJVertex GHC.Types.Float GHC.Types.Float GHC.Types.Float
    | OBJNormal GHC.Types.Float GHC.Types.Float GHC.Types.Float
    | OBJTexture GHC.Types.Float GHC.Types.Float
    | OBJFace [(GHC.Types.Int,
                GHC.Base.Maybe GHC.Types.Int,
                GHC.Base.Maybe GHC.Types.Int)]
    | UseMTL GHC.Base.String
    | LibMTL GHC.Base.String
    | Group [GHC.Base.String]
    | Object [GHC.Base.String]
f573178fc9f124d3ebdf8e7d6c8e350e
  type Point num = (num, num)
3356111f7584f098bff0185471d69d44
  type TexCoords =
    [GHC.Base.Maybe (Graphics.WaveFront.Parsers.Point GHC.Types.Float)]
9ff255d9415f00459a9702f94cf951af
  type Vector num = (num, num, num)
4d0caa5a6c2058c04306eb2d5dd8ddb9
  type Vertices = [Graphics.WaveFront.Parsers.Vector GHC.Types.Float]
c7654c3cf36c5fbbafc077a3ad4e9e80
  ambient ∷
    Graphics.WaveFront.Parsers.Material
    → Graphics.WaveFront.Parsers.Colour
  RecSel Graphics.WaveFront.Parsers.Material
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U(U,U,U,U),A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds ∷ Graphics.WaveFront.Parsers.Material →
                 case ds of wild { Graphics.WaveFront.Parsers.Material ds1 ds2 ds3 ds4 →
                 ds1 }) -}
b83da333a500f4a99c1a8de074d14a41
  back ∷ Graphics.WaveFront.Parsers.BoundingBox n → n
  RecSel Graphics.WaveFront.Parsers.BoundingBox
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLS),1*U(A,A,A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ n ds ∷ Graphics.WaveFront.Parsers.BoundingBox n →
                 case ds of wild { Graphics.WaveFront.Parsers.BoundingBox ds1 ds2 ds3 ds4 ds5 ds6 →
                 ds6 }) -}
bd180fa71aea49316c250d9eb3edd28e
  bottom ∷ Graphics.WaveFront.Parsers.BoundingBox n → n
  RecSel Graphics.WaveFront.Parsers.BoundingBox
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLL),1*U(A,A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ n ds ∷ Graphics.WaveFront.Parsers.BoundingBox n →
                 case ds of wild { Graphics.WaveFront.Parsers.BoundingBox ds1 ds2 ds3 ds4 ds5 ds6 →
                 ds4 }) -}
0f0f416f241100e7d663d3027abf064d
  boundingbox ∷
    Graphics.WaveFront.Parsers.Model
    → Graphics.WaveFront.Parsers.BoundingBox GHC.Types.Float
  {- Arity: 1, Strictness: <L,U(U,A,A,A,A,A,A)>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w ∷ Graphics.WaveFront.Parsers.Model →
                 case Graphics.WaveFront.Parsers.$wboundingbox
                        w of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 →
                 Graphics.WaveFront.Parsers.BoundingBox
                   @ GHC.Types.Float
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
ce0a0b076c25803c9157f1a38bd03edd
  buildIndexMapWith ∷
    [Graphics.WaveFront.Parsers.OBJToken]
    → Data.Map.Base.Map
        [GHC.Base.String] (GHC.Types.Int, GHC.Types.Int)
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ tokens ∷ [Graphics.WaveFront.Parsers.OBJToken] →
                 case Graphics.WaveFront.Parsers.$wgo
                        tokens
                        Graphics.WaveFront.Parsers.$fShowMTLNoParse2
                        (GHC.Types.[]
                           @ ([GHC.Base.String], GHC.Types.Int)) of ww { (#,#) ww1 ww2 →
                 let {
                   xs ∷ [([GHC.Base.String], GHC.Types.Int)]
                   = GHC.List.reverse1
                       @ ([GHC.Base.String], GHC.Types.Int)
                       (GHC.Types.:
                          @ ([GHC.Base.String], GHC.Types.Int)
                          (GHC.Types.[] @ GHC.Base.String, ww1)
                          ww2)
                       (GHC.Types.[] @ ([GHC.Base.String], GHC.Types.Int))
                 } in
                 Graphics.WaveFront.Parsers.$sfromList1
                   @ (GHC.Types.Int, GHC.Types.Int)
                   (GHC.List.zipWith
                      @ ([GHC.Base.String], GHC.Types.Int)
                      @ ([GHC.Base.String], GHC.Types.Int)
                      @ ([GHC.Base.String], (GHC.Types.Int, GHC.Types.Int))
                      Graphics.WaveFront.Parsers.createModel1
                      xs
                      (Graphics.WaveFront.Utilities.$wunsafeDrop1
                         @ ([GHC.Base.String], GHC.Types.Int)
                         1
                         xs)) }) -}
73e69f14409c7d145789af1c6dedbb51
  createMTLTable ∷
    [(GHC.Base.String, [Graphics.WaveFront.Parsers.MTLToken])]
    → Graphics.WaveFront.Parsers.MTLTable
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x ∷ [(GHC.Base.String, [Graphics.WaveFront.Parsers.MTLToken])] →
                 Graphics.WaveFront.Parsers.$sfromList3
                   @ (Data.Map.Base.Map
                        GHC.Base.String Graphics.WaveFront.Parsers.Material)
                   (GHC.Base.build
                      @ (GHC.Base.String,
                         Data.Map.Base.Map
                           GHC.Base.String Graphics.WaveFront.Parsers.Material)
                      (\ @ b1
                         c ∷ (GHC.Base.String,
                              Data.Map.Base.Map
                                GHC.Base.String Graphics.WaveFront.Parsers.Material)
                             → b1 → b1[OneShot]
                         n ∷ b1[OneShot] →
                       GHC.Base.foldr
                         @ (GHC.Base.String, [Graphics.WaveFront.Parsers.MTLToken])
                         @ b1
                         (GHC.Base.mapFB
                            @ (GHC.Base.String,
                               Data.Map.Base.Map
                                 GHC.Base.String Graphics.WaveFront.Parsers.Material)
                            @ b1
                            @ (GHC.Base.String, [Graphics.WaveFront.Parsers.MTLToken])
                            c
                            Graphics.WaveFront.Parsers.createMTLTable1)
                         n
                         x))) -}
fe1b126f732723dff0466a6401810dce
  createMTLTable1 ∷
    (GHC.Base.String, [Graphics.WaveFront.Parsers.MTLToken])
    → (GHC.Base.String,
       Data.Map.Base.Map
         GHC.Base.String Graphics.WaveFront.Parsers.Material)
  {- Arity: 1, Strictness: <S,1*U(U,1*U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w ∷ (GHC.Base.String, [Graphics.WaveFront.Parsers.MTLToken]) →
                 case w of ww { (,) ww1 ww2 →
                 (ww1,
                  Data.Map.Base.mapMaybeWithKey
                    @ GHC.Base.String
                    @ (Data.Either.Either
                         GHC.Base.String Graphics.WaveFront.Parsers.Material)
                    @ Graphics.WaveFront.Parsers.Material
                    (\ ds ∷ GHC.Base.String
                       x ∷ Data.Either.Either
                             GHC.Base.String Graphics.WaveFront.Parsers.Material[OneShot] →
                     case x of wild {
                       Data.Either.Left ds1
                       → GHC.Base.Nothing @ Graphics.WaveFront.Parsers.Material
                       Data.Either.Right mat
                       → GHC.Base.Just @ Graphics.WaveFront.Parsers.Material mat })
                    (Graphics.WaveFront.Parsers.materialsOf ww2)) }) -}
7f22c05ec48809bcfe2cf7184ef8a1f0
  createModel ∷
    Graphics.WaveFront.Parsers.OBJ
    → Graphics.WaveFront.Parsers.MTLTable
    → Graphics.WaveFront.Parsers.Model
  {- Arity: 2, Strictness: <L,1*U><L,U>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w ∷ Graphics.WaveFront.Parsers.OBJ
                   w1 ∷ Graphics.WaveFront.Parsers.MTLTable →
                 case Graphics.WaveFront.Parsers.$wcreateModel
                        w
                        w1 of ww { (#,,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ww7 →
                 Graphics.WaveFront.Parsers.Model ww1 ww2 ww3 ww4 ww5 ww6 ww7 }) -}
d4c980c25dafac74be1958b14aff9b30
  createModel1 ∷
    ([GHC.Base.String], GHC.Types.Int)
    → ([GHC.Base.String], GHC.Types.Int)
    → ([GHC.Base.String], (GHC.Types.Int, GHC.Types.Int))
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U,U)><S,1*U(A,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ ds ∷ ([GHC.Base.String], GHC.Types.Int)
                   ds1 ∷ ([GHC.Base.String], GHC.Types.Int) →
                 case ds of wild { (,) names low →
                 case ds1 of wild1 { (,) ds2 upp → (names, (low, upp)) } }) -}
b85b9f26682ffc605c513255473301ae
  createModel_go ∷
    [Graphics.WaveFront.Parsers.OBJToken]
    → [Graphics.WaveFront.Parsers.Point GHC.Types.Float]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
05a97f415d12e0e4ecf921f966f20333
  createModel_go1 ∷
    [Graphics.WaveFront.Parsers.OBJToken]
    → [Graphics.WaveFront.Parsers.Vector GHC.Types.Float]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
6a8f98ea5534c1075fc15a73d70a02c8
  createModel_go2 ∷
    [Graphics.WaveFront.Parsers.OBJToken]
    → [Graphics.WaveFront.Parsers.Vector GHC.Types.Float]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
63f1474adc3d1ba52e671fddf98c3bd0
  createModel_notGroup ∷
    Graphics.WaveFront.Parsers.OBJToken → GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds ∷ Graphics.WaveFront.Parsers.OBJToken →
                 case ds of wild {
                   DEFAULT → GHC.Types.True
                   Graphics.WaveFront.Parsers.Group ds1 → GHC.Types.False }) -}
8bf8d8e5fde4fb528db8bbac41b144a9
  createModel_notObject ∷
    Graphics.WaveFront.Parsers.OBJToken → GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds ∷ Graphics.WaveFront.Parsers.OBJToken →
                 case ds of wild {
                   DEFAULT → GHC.Types.True
                   Graphics.WaveFront.Parsers.Object ds1 → GHC.Types.False }) -}
e83b7b5eb72f73a2f3f8ab6f34cd9d14
  diffuse ∷
    Graphics.WaveFront.Parsers.Material
    → Graphics.WaveFront.Parsers.Colour
  RecSel Graphics.WaveFront.Parsers.Material
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLL),1*U(A,1*U(U,U,U,U),A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds ∷ Graphics.WaveFront.Parsers.Material →
                 case ds of wild { Graphics.WaveFront.Parsers.Material ds1 ds2 ds3 ds4 →
                 ds2 }) -}
5bf029928657c525b13600df5de3c8e6
  faces ∷
    Graphics.WaveFront.Parsers.Model
    → [Graphics.WaveFront.Parsers.Face]
  RecSel Graphics.WaveFront.Parsers.Model
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLLL),1*U(A,A,A,1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds ∷ Graphics.WaveFront.Parsers.Model →
                 case ds of wild { Graphics.WaveFront.Parsers.Model ds1 ds2 ds3 ds4 ds5 ds6 ds7 →
                 ds4 }) -}
fe3825d7b3161e8ecf3c149ce19f7ea6
  facesOf ∷
    [Graphics.WaveFront.Parsers.OBJToken]
    → Graphics.WaveFront.Parsers.MTLTable
    → [Data.Either.Either
         GHC.Base.String Graphics.WaveFront.Parsers.Face]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U> -}
d28bc8448b59574acd575443998e5cd3
  front ∷ Graphics.WaveFront.Parsers.BoundingBox n → n
  RecSel Graphics.WaveFront.Parsers.BoundingBox
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSL),1*U(A,A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ n ds ∷ Graphics.WaveFront.Parsers.BoundingBox n →
                 case ds of wild { Graphics.WaveFront.Parsers.BoundingBox ds1 ds2 ds3 ds4 ds5 ds6 →
                 ds5 }) -}
943a0d739f2ab1d22b9741e6f0d742f7
  groups ∷
    Graphics.WaveFront.Parsers.Model
    → Data.Map.Base.Map
        [GHC.Base.String] (GHC.Types.Int, GHC.Types.Int)
  RecSel Graphics.WaveFront.Parsers.Model
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLSL),1*U(A,A,A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds ∷ Graphics.WaveFront.Parsers.Model →
                 case ds of wild { Graphics.WaveFront.Parsers.Model ds1 ds2 ds3 ds4 ds5 ds6 ds7 →
                 ds6 }) -}
df4f9f043e4ca70d2c15d3dd15c7c9df
  hasTextures ∷ Graphics.WaveFront.Parsers.Model → GHC.Types.Bool
  {- Arity: 1, Strictness: <S(LLLLSLL),1*U(A,A,A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ x ∷ Graphics.WaveFront.Parsers.Model →
                 case Graphics.WaveFront.Parsers.$sfromList
                        (Data.Maybe.catMaybes1
                           @ GHC.Base.String
                           (Graphics.WaveFront.Parsers.hasTextures1 x)) of wild {
                   Data.Set.Base.Bin dt ds1 ds2 ds3 → GHC.Types.True
                   Data.Set.Base.Tip → GHC.Types.False }) -}
3aa39aaf5194c162de71b3e4204dd882
  hasTextures1 ∷
    Graphics.WaveFront.Parsers.Model → [GHC.Base.Maybe GHC.Base.String]
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSLL),1*U(A,A,A,A,1*U,A,A)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w ∷ Graphics.WaveFront.Parsers.Model →
                 case w of ww { Graphics.WaveFront.Parsers.Model ww1 ww2 ww3 ww4 ww5 ww6 ww7 →
                 Graphics.WaveFront.Parsers.$wa ww5 }) -}
9820574e222c841ff43066e20c27b348
  hasTextures_go10 ∷
    [GHC.Base.Maybe GHC.Base.String]
    → Data.Map.Base.Map
        [GHC.Types.Char]
        (Data.Map.Base.Map
           GHC.Base.String Graphics.WaveFront.Parsers.Material)
    → [GHC.Base.Maybe GHC.Base.String]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U> -}
acb9838834cc34b2b7607ea8a32592cb
  indices ∷
    Graphics.WaveFront.Parsers.Face
    → [(GHC.Types.Int,
        GHC.Base.Maybe GHC.Types.Int,
        GHC.Base.Maybe GHC.Types.Int)]
  RecSel Graphics.WaveFront.Parsers.Face
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds ∷ Graphics.WaveFront.Parsers.Face →
                 case ds of wild { Graphics.WaveFront.Parsers.Face ds1 ds2 →
                 ds1 }) -}
966c7977ea880cba0b121aabc6647db4
  left ∷ Graphics.WaveFront.Parsers.BoundingBox n → n
  RecSel Graphics.WaveFront.Parsers.BoundingBox
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLL),1*U(1*U,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ n ds ∷ Graphics.WaveFront.Parsers.BoundingBox n →
                 case ds of wild { Graphics.WaveFront.Parsers.BoundingBox ds1 ds2 ds3 ds4 ds5 ds6 →
                 ds1 }) -}
3924a832e2e472ffc039723d8efcba14
  material ∷
    Graphics.WaveFront.Parsers.Face
    → Graphics.WaveFront.Parsers.Material
  RecSel Graphics.WaveFront.Parsers.Face
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U(U,U,U,U))>,
     Unfolding: InlineRule (1, True, False)
                (\ ds ∷ Graphics.WaveFront.Parsers.Face →
                 case ds of wild { Graphics.WaveFront.Parsers.Face ds1 ds2 →
                 ds2 }) -}
bff477e4f2b52bc645cd4880c5e18f8d
  materials ∷
    Graphics.WaveFront.Parsers.Model
    → Graphics.WaveFront.Parsers.MTLTable
  RecSel Graphics.WaveFront.Parsers.Model
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSLL),1*U(A,A,A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds ∷ Graphics.WaveFront.Parsers.Model →
                 case ds of wild { Graphics.WaveFront.Parsers.Model ds1 ds2 ds3 ds4 ds5 ds6 ds7 →
                 ds5 }) -}
199700dc92c790b3224305ed218ba8ce
  materialsOf ∷
    [Graphics.WaveFront.Parsers.MTLToken]
    → Data.Map.Base.Map
        GHC.Base.String
        (Data.Either.Either
           GHC.Base.String Graphics.WaveFront.Parsers.Material)
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ tokens ∷ [Graphics.WaveFront.Parsers.MTLToken] →
                 Graphics.WaveFront.Parsers.$sfromList3
                   @ (Data.Either.Either
                        [GHC.Types.Char] Graphics.WaveFront.Parsers.Material)
                   (Data.Either.rights1
                      @ [GHC.Types.Char]
                      @ (GHC.Base.String,
                         Data.Either.Either
                           [GHC.Types.Char] Graphics.WaveFront.Parsers.Material)
                      (GHC.Base.map
                         @ [Graphics.WaveFront.Parsers.MTLToken]
                         @ (Data.Either.Either
                              [GHC.Types.Char]
                              (GHC.Base.String,
                               Data.Either.Either
                                 [GHC.Types.Char] Graphics.WaveFront.Parsers.Material))
                         Graphics.WaveFront.Parsers.materialsOf2
                         (Data.OldList.groupBy
                            @ Graphics.WaveFront.Parsers.MTLToken
                            Graphics.WaveFront.Parsers.materialsOf1
                            tokens)))) -}
52c00a0fd96b152159434bf378b5bea7
  materialsOf1 ∷
    Graphics.WaveFront.Parsers.MTLToken
    → Graphics.WaveFront.Parsers.MTLToken → GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ x ∷ Graphics.WaveFront.Parsers.MTLToken
                   eta ∷ Graphics.WaveFront.Parsers.MTLToken →
                 case eta of wild {
                   DEFAULT → GHC.Types.True
                   Graphics.WaveFront.Parsers.NewMaterial ds → GHC.Types.False }) -}
93bbca85a25aab5b7290169dd453f673
  materialsOf2 ∷
    [Graphics.WaveFront.Parsers.MTLToken]
    → Data.Either.Either
        [GHC.Types.Char]
        (GHC.Base.String,
         Data.Either.Either
           [GHC.Types.Char] Graphics.WaveFront.Parsers.Material)
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ ds ∷ [Graphics.WaveFront.Parsers.MTLToken] →
                 case ds of wild {
                   []
                   → Data.Either.Left
                       @ [GHC.Types.Char]
                       @ (GHC.Base.String,
                          Data.Either.Either
                            [GHC.Types.Char] Graphics.WaveFront.Parsers.Material)
                       Graphics.WaveFront.Parsers.materialsOf5
                   : ds1 attrs
                   → case ds1 of wild1 {
                       DEFAULT
                       → Data.Either.Left
                           @ [GHC.Types.Char]
                           @ (GHC.Base.String,
                              Data.Either.Either
                                [GHC.Types.Char] Graphics.WaveFront.Parsers.Material)
                           (Graphics.WaveFront.Parsers.materialsOf4
                              @ [GHC.Types.Char]
                              (GHC.Types.: @ GHC.Types.Char)
                              (GHC.Types.:
                                 @ GHC.Types.Char
                                 GHC.Show.showList__3
                                 (Graphics.WaveFront.Parsers.$w$cshowsPrec1
                                    0
                                    wild1
                                    (Graphics.WaveFront.Parsers.materialsOf_showl attrs))))
                       Graphics.WaveFront.Parsers.NewMaterial name
                       → Data.Either.Right
                           @ [GHC.Types.Char]
                           @ (GHC.Base.String,
                              Data.Either.Either
                                [GHC.Types.Char] Graphics.WaveFront.Parsers.Material)
                           (name,
                            let {
                              diff ∷ [(GHC.Types.Float,
                                       GHC.Types.Float,
                                       GHC.Types.Float,
                                       GHC.Types.Float)]
                              = Graphics.WaveFront.Parsers.materialsOf_go4 attrs
                            } in
                            let {
                              a1 ∷ [(GHC.Types.Float,
                                     GHC.Types.Float,
                                     GHC.Types.Float,
                                     GHC.Types.Float)]
                              = Graphics.WaveFront.Parsers.materialsOf_go3 attrs
                            } in
                            let {
                              a2 ∷ [(GHC.Types.Float,
                                     GHC.Types.Float,
                                     GHC.Types.Float,
                                     GHC.Types.Float)]
                              = Graphics.WaveFront.Parsers.materialsOf_go2 attrs
                            } in
                            case (Graphics.WaveFront.Parsers.materialsOf_go1
                                    (GHC.Types.:
                                       @ [(GHC.Types.Float,
                                           GHC.Types.Float,
                                           GHC.Types.Float,
                                           GHC.Types.Float)]
                                       diff
                                       (GHC.Types.:
                                          @ [(GHC.Types.Float,
                                              GHC.Types.Float,
                                              GHC.Types.Float,
                                              GHC.Types.Float)]
                                          a1
                                          (GHC.Types.:
                                             @ [(GHC.Types.Float,
                                                 GHC.Types.Float,
                                                 GHC.Types.Float,
                                                 GHC.Types.Float)]
                                             a2
                                             (GHC.Types.[]
                                                @ [(GHC.Types.Float,
                                                    GHC.Types.Float,
                                                    GHC.Types.Float,
                                                    GHC.Types.Float)])))))
                                   `cast`
                                 (Data.Monoid.NTCo:Any[0]) of wild2 {
                              GHC.Types.False
                              → Data.Either.Right
                                  @ [GHC.Types.Char]
                                  @ Graphics.WaveFront.Parsers.Material
                                  (Graphics.WaveFront.Parsers.Material
                                     (GHC.List.head @ Graphics.WaveFront.Parsers.Colour a2)
                                     (GHC.List.head @ Graphics.WaveFront.Parsers.Colour diff)
                                     (GHC.List.head @ Graphics.WaveFront.Parsers.Colour a1)
                                     (case Graphics.WaveFront.Parsers.materialsOf_go
                                             attrs of wild3 {
                                        [] → GHC.Base.Nothing @ GHC.Base.String
                                        : a3 ds2 → GHC.Base.Just @ GHC.Base.String a3 }))
                              GHC.Types.True
                              → Data.Either.Left
                                  @ [GHC.Types.Char]
                                  @ Graphics.WaveFront.Parsers.Material
                                  Graphics.WaveFront.Parsers.materialsOf3 }) } }) -}
e967317649ffe6d4f28f26cbcff8ca8f
  materialsOf3 ∷ [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Missing colour(s)"#) -}
e5d25eaf08b8ab3fac1ce64be5f62cbb
  materialsOf4 ∷ (GHC.Types.Char → b → b) → b → b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(C1(U))><L,U>,
     Unfolding: (\ @ b
                   c ∷ GHC.Types.Char → b → b[OneShot]
                   n ∷ b[OneShot] →
                 GHC.CString.unpackFoldrCString#
                   @ b
                   "Free-floating attributes: "#
                   c
                   n) -}
2ecf763ba329ec5058823080dbb4ef31
  materialsOf5 ∷ [GHC.Types.Char]
  {- Unfolding: (Graphics.WaveFront.Parsers.materialsOf4
                   @ [GHC.Types.Char]
                   (GHC.Types.: @ GHC.Types.Char)
                   Graphics.WaveFront.Parsers.materialsOf6) -}
ecb6e0d859af489b4579e4456e91b82c
  materialsOf6 ∷ [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   "[]"#
                   (GHC.Types.[] @ GHC.Types.Char)) -}
99b478695c96206e9b5e9d02bfc7ae92
  materialsOf_go ∷
    [Graphics.WaveFront.Parsers.MTLToken] → [GHC.Base.String]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
582ca5eab828f2eddbdaaf687a706c1b
  materialsOf_go1 ∷
    [[(GHC.Types.Float,
       GHC.Types.Float,
       GHC.Types.Float,
       GHC.Types.Float)]]
    → Data.Monoid.Any
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
f0e0cc034c8bdf2bfbe474014e689cb7
  materialsOf_go2 ∷
    [Graphics.WaveFront.Parsers.MTLToken]
    → [(GHC.Types.Float,
        GHC.Types.Float,
        GHC.Types.Float,
        GHC.Types.Float)]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
594dfc2555e6f53d673313d8ae46b6c7
  materialsOf_go3 ∷
    [Graphics.WaveFront.Parsers.MTLToken]
    → [(GHC.Types.Float,
        GHC.Types.Float,
        GHC.Types.Float,
        GHC.Types.Float)]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
4cce17de1a56389ddaf3e73d00773101
  materialsOf_go4 ∷
    [Graphics.WaveFront.Parsers.MTLToken]
    → [(GHC.Types.Float,
        GHC.Types.Float,
        GHC.Types.Float,
        GHC.Types.Float)]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
307dcb048967c16357cb466656a321f5
  materialsOf_showl ∷
    [Graphics.WaveFront.Parsers.MTLToken] → [GHC.Types.Char]
  {- Arity: 1, Strictness: <S,1*U> -}
afa88d163dbaa7bf3b819624d0d6c789
  modelAttributes ∷
    Graphics.WaveFront.Parsers.Model
    → (Graphics.WaveFront.Parsers.Vertices,
       Graphics.WaveFront.Parsers.TexCoords,
       Graphics.WaveFront.Parsers.Normals,
       Graphics.WaveFront.Parsers.Materials)
  {- Arity: 1, Strictness: <S(LLLSLLL),1*U(U,U,U,1*U,A,A,A)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w ∷ Graphics.WaveFront.Parsers.Model →
                 case w of ww { Graphics.WaveFront.Parsers.Model ww1 ww2 ww3 ww4 ww5 ww6 ww7 →
                 case Graphics.WaveFront.Parsers.$wmodelAttributes
                        ww1
                        ww2
                        ww3
                        ww4 of ww8 { (#,,,#) ww9 ww10 ww11 ww12 →
                 (ww9, ww10, ww11, ww12) } }) -}
d68029cfd094f6aabbe2328416442318
  normals ∷
    Graphics.WaveFront.Parsers.Model
    → [Graphics.WaveFront.Parsers.Vector GHC.Types.Float]
  RecSel Graphics.WaveFront.Parsers.Model
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLLL),1*U(A,1*U,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds ∷ Graphics.WaveFront.Parsers.Model →
                 case ds of wild { Graphics.WaveFront.Parsers.Model ds1 ds2 ds3 ds4 ds5 ds6 ds7 →
                 ds2 }) -}
b3fc29a65bc47da77335075e9c5be906
  objects ∷
    Graphics.WaveFront.Parsers.Model
    → Data.Map.Base.Map
        [GHC.Base.String] (GHC.Types.Int, GHC.Types.Int)
  RecSel Graphics.WaveFront.Parsers.Model
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLS),1*U(A,A,A,A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds ∷ Graphics.WaveFront.Parsers.Model →
                 case ds of wild { Graphics.WaveFront.Parsers.Model ds1 ds2 ds3 ds4 ds5 ds6 ds7 →
                 ds7 }) -}
a6ff1d8b3443778484fbe18856f0cc04
  parseMTL ∷ GHC.Base.String → Graphics.WaveFront.Parsers.MTL
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ x ∷ GHC.Base.String →
                 GHC.List.zipWith
                   @ GHC.Types.Int
                   @ (GHC.Types.Int
                      → (GHC.Types.Int,
                         Data.Either.Either
                           Graphics.WaveFront.Parsers.MTLNoParse
                           Graphics.WaveFront.Parsers.MTLToken,
                         GHC.Base.String))
                   @ (GHC.Types.Int,
                      Data.Either.Either
                        Graphics.WaveFront.Parsers.MTLNoParse
                        Graphics.WaveFront.Parsers.MTLToken,
                      GHC.Base.String)
                   (Graphics.WaveFront.Utilities.enumerate2
                      @ (Data.Either.Either
                           Graphics.WaveFront.Parsers.MTLNoParse
                           Graphics.WaveFront.Parsers.MTLToken)
                      @ GHC.Base.String)
                   Graphics.WaveFront.Utilities.enumerate1
                   (GHC.Base.map
                      @ [GHC.Types.Char]
                      @ (GHC.Types.Int
                         → (GHC.Types.Int,
                            Data.Either.Either
                              Graphics.WaveFront.Parsers.MTLNoParse
                              Graphics.WaveFront.Parsers.MTLToken,
                            GHC.Base.String))
                      Graphics.WaveFront.Parsers.parseMTLRow
                      (Data.OldList.lines x))) -}
537ee125cedac7c7b102cd2e493d9e03
  parseMTLRow ∷
    GHC.Base.String → GHC.Types.Int → Graphics.WaveFront.Parsers.MTLRow
  {- Arity: 2, Strictness: <S,1*U><L,U>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w ∷ GHC.Base.String w1 ∷ GHC.Types.Int →
                 case Graphics.WaveFront.Parsers.$wparseMTLRow
                        w
                        w1 of ww { (#,,#) ww1 ww2 ww3 →
                 (ww1, ww2, ww3) }) -}
ed6b532c76fe70f059a8f41b24d0e0af
  parseOBJ ∷ GHC.Base.String → Graphics.WaveFront.Parsers.OBJ
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ x ∷ GHC.Base.String →
                 GHC.List.zipWith
                   @ GHC.Types.Int
                   @ (GHC.Types.Int
                      → (GHC.Types.Int,
                         Data.Either.Either
                           Graphics.WaveFront.Parsers.OBJNoParse
                           Graphics.WaveFront.Parsers.OBJToken,
                         GHC.Base.String))
                   @ (GHC.Types.Int,
                      Data.Either.Either
                        Graphics.WaveFront.Parsers.OBJNoParse
                        Graphics.WaveFront.Parsers.OBJToken,
                      GHC.Base.String)
                   (Graphics.WaveFront.Utilities.enumerate2
                      @ (Data.Either.Either
                           Graphics.WaveFront.Parsers.OBJNoParse
                           Graphics.WaveFront.Parsers.OBJToken)
                      @ GHC.Base.String)
                   Graphics.WaveFront.Utilities.enumerate1
                   (GHC.Base.map
                      @ [GHC.Types.Char]
                      @ (GHC.Types.Int
                         → (GHC.Types.Int,
                            Data.Either.Either
                              Graphics.WaveFront.Parsers.OBJNoParse
                              Graphics.WaveFront.Parsers.OBJToken,
                            GHC.Base.String))
                      Graphics.WaveFront.Parsers.parseOBJRow
                      (Data.OldList.lines x))) -}
70e0c2869139c4b86b1eef16b9627f54
  parseOBJRow ∷
    GHC.Base.String → GHC.Types.Int → Graphics.WaveFront.Parsers.OBJRow
  {- Arity: 2, Strictness: <S,1*U><L,U>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w ∷ GHC.Base.String w1 ∷ GHC.Types.Int →
                 case Graphics.WaveFront.Parsers.$wparseOBJRow
                        w
                        w1 of ww { (#,,#) ww1 ww2 ww3 →
                 (ww1, ww2, ww3) }) -}
2e6210fe6e336cfddfc1fba12765b5d9
  right ∷ Graphics.WaveFront.Parsers.BoundingBox n → n
  RecSel Graphics.WaveFront.Parsers.BoundingBox
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLL),1*U(A,1*U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ n ds ∷ Graphics.WaveFront.Parsers.BoundingBox n →
                 case ds of wild { Graphics.WaveFront.Parsers.BoundingBox ds1 ds2 ds3 ds4 ds5 ds6 →
                 ds2 }) -}
105a2052f14ba2dd89e4d9234c6c74d9
  specular ∷
    Graphics.WaveFront.Parsers.Material
    → Graphics.WaveFront.Parsers.Colour
  RecSel Graphics.WaveFront.Parsers.Material
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSL),1*U(A,A,1*U(U,U,U,U),A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds ∷ Graphics.WaveFront.Parsers.Material →
                 case ds of wild { Graphics.WaveFront.Parsers.Material ds1 ds2 ds3 ds4 →
                 ds3 }) -}
7a5143f467bd0dccf5a53af37fa7d1e3
  tessellate ∷
    Graphics.WaveFront.Parsers.Face → Graphics.WaveFront.Parsers.Face
  {- Arity: 1, Strictness: <S,1*U(1*U,U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w ∷ Graphics.WaveFront.Parsers.Face →
                 case w of ww { Graphics.WaveFront.Parsers.Face ww1 ww2 →
                 case Graphics.WaveFront.Parsers.$wtessellate
                        ww1
                        ww2 of ww3 { (#,#) ww4 ww5 →
                 Graphics.WaveFront.Parsers.Face ww4 ww5 } }) -}
0adf3b403aedf3e121edc487f91df494
  tessellate1 ∷
    [(GHC.Types.Int,
      GHC.Base.Maybe GHC.Types.Int,
      GHC.Base.Maybe GHC.Types.Int)]
  {- Strictness: b -}
b01ab26118171fc8aba9327c9fec9ca1
  texcoords ∷
    Graphics.WaveFront.Parsers.Model
    → [Graphics.WaveFront.Parsers.Point GHC.Types.Float]
  RecSel Graphics.WaveFront.Parsers.Model
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLLL),1*U(A,A,1*U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds ∷ Graphics.WaveFront.Parsers.Model →
                 case ds of wild { Graphics.WaveFront.Parsers.Model ds1 ds2 ds3 ds4 ds5 ds6 ds7 →
                 ds3 }) -}
e6f529c453f1e329e6b0cb091534b16a
  texture ∷
    Graphics.WaveFront.Parsers.Material
    → GHC.Base.Maybe GHC.Base.String
  RecSel Graphics.WaveFront.Parsers.Material
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLS),1*U(A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds ∷ Graphics.WaveFront.Parsers.Material →
                 case ds of wild { Graphics.WaveFront.Parsers.Material ds1 ds2 ds3 ds4 →
                 ds4 }) -}
fb4ee226b073a9367cb43d8260d43826
  textures ∷
    Graphics.WaveFront.Parsers.Model
    → Data.Set.Base.Set GHC.Base.String
  {- Arity: 1, Strictness: <S(LLLLSLL),1*U(A,A,A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ x ∷ Graphics.WaveFront.Parsers.Model →
                 Graphics.WaveFront.Parsers.$sfromList
                   (Data.Maybe.catMaybes1
                      @ GHC.Base.String
                      (Graphics.WaveFront.Parsers.hasTextures1 x))) -}
8c372a18fb4d74273f88b0f0f7100485
  top ∷ Graphics.WaveFront.Parsers.BoundingBox n → n
  RecSel Graphics.WaveFront.Parsers.BoundingBox
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLL),1*U(A,A,1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ n ds ∷ Graphics.WaveFront.Parsers.BoundingBox n →
                 case ds of wild { Graphics.WaveFront.Parsers.BoundingBox ds1 ds2 ds3 ds4 ds5 ds6 →
                 ds3 }) -}
8787d0069bbcd3117421232a47912f81
  vertices ∷
    Graphics.WaveFront.Parsers.Model
    → [Graphics.WaveFront.Parsers.Vector GHC.Types.Float]
  RecSel Graphics.WaveFront.Parsers.Model
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLLL),1*U(1*U,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds ∷ Graphics.WaveFront.Parsers.Model →
                 case ds of wild { Graphics.WaveFront.Parsers.Model ds1 ds2 ds3 ds4 ds5 ds6 ds7 →
                 ds1 }) -}
instance GHC.Classes.Eq [Graphics.WaveFront.Parsers.MTLToken]
  = Graphics.WaveFront.Parsers.$fEqMTLToken
instance GHC.Classes.Eq [Graphics.WaveFront.Parsers.OBJToken]
  = Graphics.WaveFront.Parsers.$fEqOBJToken
instance GHC.Show.Show [Graphics.WaveFront.Parsers.Face]
  = Graphics.WaveFront.Parsers.$fShowFace
instance GHC.Show.Show [Graphics.WaveFront.Parsers.MTLNoParse]
  = Graphics.WaveFront.Parsers.$fShowMTLNoParse
instance GHC.Show.Show [Graphics.WaveFront.Parsers.MTLToken]
  = Graphics.WaveFront.Parsers.$fShowMTLToken
instance GHC.Show.Show [Graphics.WaveFront.Parsers.Material]
  = Graphics.WaveFront.Parsers.$fShowMaterial
instance GHC.Show.Show [Graphics.WaveFront.Parsers.Model]
  = Graphics.WaveFront.Parsers.$fShowModel
instance GHC.Show.Show [Graphics.WaveFront.Parsers.OBJNoParse]
  = Graphics.WaveFront.Parsers.$fShowOBJNoParse
instance GHC.Show.Show [Graphics.WaveFront.Parsers.OBJToken]
  = Graphics.WaveFront.Parsers.$fShowOBJToken
"SPEC/Graphics.WaveFront.Parsers $fEq(,,) @ Int @ (Maybe
                                                    Int) @ (Maybe Int)" [ALWAYS] forall $dEq ∷ GHC.Classes.Eq
                                                                                                                                                          GHC.Types.Int
                                                                                                                                                 $dEq1 ∷ GHC.Classes.Eq
                                                                                                                                                           (GHC.Base.Maybe
                                                                                                                                                              GHC.Types.Int)
                                                                                                                                                 $dEq2 ∷ GHC.Classes.Eq
                                                                                                                                                           (GHC.Base.Maybe
                                                                                                                                                              GHC.Types.Int)
  GHC.Classes.$fEq(,,) @ GHC.Types.Int
                       @ (GHC.Base.Maybe GHC.Types.Int)
                       @ (GHC.Base.Maybe GHC.Types.Int)
                       $dEq
                       $dEq1
                       $dEq2
  = Graphics.WaveFront.Parsers.$fEqOBJToken_$s$fEq(,,)
"SPEC/Graphics.WaveFront.Parsers $fEq(,,)_$c/= @ Int @ (Maybe
                                                         Int) @ (Maybe Int)" [ALWAYS] forall $dEq ∷ GHC.Classes.Eq
                                                                                                                                                                    GHC.Types.Int
                                                                                                                                                           $dEq1 ∷ GHC.Classes.Eq
                                                                                                                                                                     (GHC.Base.Maybe
                                                                                                                                                                        GHC.Types.Int)
                                                                                                                                                           $dEq2 ∷ GHC.Classes.Eq
                                                                                                                                                                     (GHC.Base.Maybe
                                                                                                                                                                        GHC.Types.Int)
  GHC.Classes.$fEq(,,)_$c/= @ GHC.Types.Int
                            @ (GHC.Base.Maybe GHC.Types.Int)
                            @ (GHC.Base.Maybe GHC.Types.Int)
                            $dEq
                            $dEq1
                            $dEq2
  = Graphics.WaveFront.Parsers.$fEqOBJToken_$s$fEq(,,)_$c/=
"SPEC/Graphics.WaveFront.Parsers $fEqMaybe @ Int" [ALWAYS] forall $dEq ∷ GHC.Classes.Eq
                                                                           GHC.Types.Int
  GHC.Base.$fEqMaybe @ GHC.Types.Int $dEq
  = Graphics.WaveFront.Parsers.$fEqOBJToken_$s$fEqMaybe
"SPEC/Graphics.WaveFront.Parsers $fShow(,) @ Int @ Int" [ALWAYS] forall $dShow ∷ GHC.Show.Show
                                                                                   GHC.Types.Int
                                                                        $dShow1 ∷ GHC.Show.Show
                                                                                    GHC.Types.Int
  GHC.Show.$fShow(,) @ GHC.Types.Int @ GHC.Types.Int $dShow $dShow1
  = Graphics.WaveFront.Parsers.$s$fShow(,)
"SPEC/Graphics.WaveFront.Parsers $fShow(,)_$cshow @ Int @ Int" [ALWAYS] forall $dShow ∷ GHC.Show.Show
                                                                                          GHC.Types.Int
                                                                               $dShow1 ∷ GHC.Show.Show
                                                                                           GHC.Types.Int
  GHC.Show.$fShow(,)_$cshow @ GHC.Types.Int
                            @ GHC.Types.Int
                            $dShow
                            $dShow1
  = Graphics.WaveFront.Parsers.$s$fShow(,)_$s$fShow(,)_$cshow
"SPEC/Graphics.WaveFront.Parsers $fShow(,)_$cshowList @ Int @ Int" [ALWAYS] forall $dShow ∷ GHC.Show.Show
                                                                                              GHC.Types.Int
                                                                                   $dShow1 ∷ GHC.Show.Show
                                                                                               GHC.Types.Int
  GHC.Show.$fShow(,)_$cshowList @ GHC.Types.Int
                                @ GHC.Types.Int
                                $dShow
                                $dShow1
  = Graphics.WaveFront.Parsers.$s$fShow(,)_$s$fShow(,)_$cshowList
"SPEC/Graphics.WaveFront.Parsers $fShowMap @ [Char] @ Material" [ALWAYS] forall $dShow ∷ GHC.Show.Show
                                                                                           [GHC.Types.Char]
                                                                                $dShow1 ∷ GHC.Show.Show
                                                                                            Graphics.WaveFront.Parsers.Material
  Data.Map.Base.$fShowMap @ [GHC.Types.Char]
                          @ Graphics.WaveFront.Parsers.Material
                          $dShow
                          $dShow1
  = Graphics.WaveFront.Parsers.$s$fShowMap
"SPEC/Graphics.WaveFront.Parsers fromList @ String" [ALWAYS] forall $dOrd ∷ GHC.Classes.Ord
                                                                              GHC.Base.String
  Data.Set.Base.fromList @ [GHC.Types.Char] $dOrd
  = Graphics.WaveFront.Parsers.$sfromList
"SPEC/Graphics.WaveFront.Parsers fromList @ String _" [ALWAYS] forall @ a1
                                                                      $dOrd ∷ GHC.Classes.Ord
                                                                                GHC.Base.String
  Data.Map.Base.fromList @ [GHC.Types.Char] @ a1 $dOrd
  = Graphics.WaveFront.Parsers.$sfromList3 @ a1
"SPEC/Graphics.WaveFront.Parsers fromList @ [String] _" [ALWAYS] forall @ a1
                                                                        $dOrd ∷ GHC.Classes.Ord
                                                                                  [GHC.Base.String]
  Data.Map.Base.fromList @ [GHC.Base.String] @ a1 $dOrd
  = Graphics.WaveFront.Parsers.$sfromList1 @ a1
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

