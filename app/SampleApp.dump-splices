C:\Users\Jonatan\Desktop\Haskell\modules\WaveFront\app\SampleApp.hs:128:1-43: Splicing declarations
    makeLensesWith abbreviatedFields ''AppState
  ======>
    class HasClientsize s a | s -> a where
      clientsize :: Lens' s a
    instance HasClientsize AppState (V2 Int) where
      {-# INLINE clientsize #-}
      clientsize
        f_aJx3
        (AppState x1_aJx4 x2_aJx5 x3_aJx6 x4_aJx7 x5_aJx8)
        = fmap
            (\ y1_aJx9 -> AppState x1_aJx4 x2_aJx5 y1_aJx9 x4_aJx7 x5_aJx8)
            (f_aJx3 x3_aJx6)
    class HasFrame s a | s -> a where
      frame :: Lens' s a
    instance HasFrame AppState Int where
      {-# INLINE frame #-}
      frame f_aJxa (AppState x1_aJxb x2_aJxc x3_aJxd x4_aJxe x5_aJxf)
        = fmap
            (\ y1_aJxg -> AppState x1_aJxb x2_aJxc x3_aJxd y1_aJxg x5_aJxf)
            (f_aJxa x4_aJxe)
    class HasMouse s a | s -> a where
      mouse :: Lens' s a
    instance HasMouse AppState (Maybe (V2 Double)) where
      {-# INLINE mouse #-}
      mouse f_aJxh (AppState x1_aJxi x2_aJxj x3_aJxk x4_aJxl x5_aJxm)
        = fmap
            (\ y1_aJxn -> AppState x1_aJxi y1_aJxn x3_aJxk x4_aJxl x5_aJxm)
            (f_aJxh x2_aJxj)
    class HasRotation s a | s -> a where
      rotation :: Lens' s a
    instance HasRotation AppState (V2 Double) where
      {-# INLINE rotation #-}
      rotation f_aJxo (AppState x1_aJxp x2_aJxq x3_aJxr x4_aJxs x5_aJxt)
        = fmap
            (\ y1_aJxu -> AppState y1_aJxu x2_aJxq x3_aJxr x4_aJxs x5_aJxt)
            (f_aJxo x1_aJxp)
    class HasScene s a | s -> a where
      scene :: Lens' s a
    instance HasScene AppState Scene where
      {-# INLINE scene #-}
      scene f_aJxv (AppState x1_aJxw x2_aJxx x3_aJxy x4_aJxz x5_aJxA)
        = fmap
            (\ y1_aJxB -> AppState x1_aJxw x2_aJxx x3_aJxy x4_aJxz y1_aJxB)
            (f_aJxv x5_aJxA)
C:\Users\Jonatan\Desktop\Haskell\modules\WaveFront\app\SampleApp.hs:129:1-40: Splicing declarations
    makeLensesWith abbreviatedFields ''Scene
  ======>
    class HasMeshes s a | s -> a where
      meshes :: Lens' s a
    instance HasMeshes Scene [Mesh Double Int] where
      {-# INLINE meshes #-}
      meshes = iso (\ (Scene x_aJBc) -> x_aJBc) Scene
C:\Users\Jonatan\Desktop\Haskell\modules\WaveFront\app\SampleApp.hs:128:1-43: Splicing declarations
    makeLensesWith abbreviatedFields ''AppState
  ======>
    class HasClientsize s a | s -> a where
      clientsize :: Lens' s a
    instance HasClientsize AppState (V2 Int) where
      {-# INLINE clientsize #-}
      clientsize
        f_aM23
        (AppState x1_aM24 x2_aM25 x3_aM26 x4_aM27 x5_aM28)
        = fmap
            (\ y1_aM29 -> AppState x1_aM24 x2_aM25 y1_aM29 x4_aM27 x5_aM28)
            (f_aM23 x3_aM26)
    class HasFrame s a | s -> a where
      frame :: Lens' s a
    instance HasFrame AppState Int where
      {-# INLINE frame #-}
      frame f_aM2a (AppState x1_aM2b x2_aM2c x3_aM2d x4_aM2e x5_aM2f)
        = fmap
            (\ y1_aM2g -> AppState x1_aM2b x2_aM2c x3_aM2d y1_aM2g x5_aM2f)
            (f_aM2a x4_aM2e)
    class HasMouse s a | s -> a where
      mouse :: Lens' s a
    instance HasMouse AppState (Maybe (V2 Double)) where
      {-# INLINE mouse #-}
      mouse f_aM2h (AppState x1_aM2i x2_aM2j x3_aM2k x4_aM2l x5_aM2m)
        = fmap
            (\ y1_aM2n -> AppState x1_aM2i y1_aM2n x3_aM2k x4_aM2l x5_aM2m)
            (f_aM2h x2_aM2j)
    class HasRotation s a | s -> a where
      rotation :: Lens' s a
    instance HasRotation AppState (V2 Double) where
      {-# INLINE rotation #-}
      rotation f_aM2o (AppState x1_aM2p x2_aM2q x3_aM2r x4_aM2s x5_aM2t)
        = fmap
            (\ y1_aM2u -> AppState y1_aM2u x2_aM2q x3_aM2r x4_aM2s x5_aM2t)
            (f_aM2o x1_aM2p)
    class HasScene s a | s -> a where
      scene :: Lens' s a
    instance HasScene AppState Scene where
      {-# INLINE scene #-}
      scene f_aM2v (AppState x1_aM2w x2_aM2x x3_aM2y x4_aM2z x5_aM2A)
        = fmap
            (\ y1_aM2B -> AppState x1_aM2w x2_aM2x x3_aM2y x4_aM2z y1_aM2B)
            (f_aM2v x5_aM2A)
C:\Users\Jonatan\Desktop\Haskell\modules\WaveFront\app\SampleApp.hs:129:1-40: Splicing declarations
    makeLensesWith abbreviatedFields ''Scene
  ======>
    class HasMeshes s a | s -> a where
      meshes :: Lens' s a
    instance HasMeshes Scene [Mesh Double Int] where
      {-# INLINE meshes #-}
      meshes = iso (\ (Scene x_aM5t) -> x_aM5t) Scene
C:\Users\Jonatan\Desktop\Haskell\modules\WaveFront\app\SampleApp.hs:128:1-43: Splicing declarations
    makeLensesWith abbreviatedFields ''AppState
  ======>
    class HasClientsize s a | s -> a where
      clientsize :: Lens' s a
    instance HasClientsize AppState (V2 Int) where
      {-# INLINE clientsize #-}
      clientsize
        f_aPHb
        (AppState x1_aPHc x2_aPHd x3_aPHe x4_aPHf x5_aPHg)
        = fmap
            (\ y1_aPHh -> AppState x1_aPHc x2_aPHd y1_aPHh x4_aPHf x5_aPHg)
            (f_aPHb x3_aPHe)
    class HasFrame s a | s -> a where
      frame :: Lens' s a
    instance HasFrame AppState Int where
      {-# INLINE frame #-}
      frame f_aPHi (AppState x1_aPHj x2_aPHk x3_aPHl x4_aPHm x5_aPHn)
        = fmap
            (\ y1_aPHo -> AppState x1_aPHj x2_aPHk x3_aPHl y1_aPHo x5_aPHn)
            (f_aPHi x4_aPHm)
    class HasMouse s a | s -> a where
      mouse :: Lens' s a
    instance HasMouse AppState (Maybe (V2 Double)) where
      {-# INLINE mouse #-}
      mouse f_aPHp (AppState x1_aPHq x2_aPHr x3_aPHs x4_aPHt x5_aPHu)
        = fmap
            (\ y1_aPHv -> AppState x1_aPHq y1_aPHv x3_aPHs x4_aPHt x5_aPHu)
            (f_aPHp x2_aPHr)
    class HasRotation s a | s -> a where
      rotation :: Lens' s a
    instance HasRotation AppState (V2 Double) where
      {-# INLINE rotation #-}
      rotation f_aPHw (AppState x1_aPHx x2_aPHy x3_aPHz x4_aPHA x5_aPHB)
        = fmap
            (\ y1_aPHC -> AppState y1_aPHC x2_aPHy x3_aPHz x4_aPHA x5_aPHB)
            (f_aPHw x1_aPHx)
    class HasScene s a | s -> a where
      scene :: Lens' s a
    instance HasScene AppState Scene where
      {-# INLINE scene #-}
      scene f_aPHD (AppState x1_aPHE x2_aPHF x3_aPHG x4_aPHH x5_aPHI)
        = fmap
            (\ y1_aPHJ -> AppState x1_aPHE x2_aPHF x3_aPHG x4_aPHH y1_aPHJ)
            (f_aPHD x5_aPHI)
C:\Users\Jonatan\Desktop\Haskell\modules\WaveFront\app\SampleApp.hs:129:1-40: Splicing declarations
    makeLensesWith abbreviatedFields ''Scene
  ======>
    class HasMeshes s a | s -> a where
      meshes :: Lens' s a
    instance HasMeshes Scene [Mesh Double Int] where
      {-# INLINE meshes #-}
      meshes = iso (\ (Scene x_aPKB) -> x_aPKB) Scene
C:\Users\Jonatan\Desktop\Haskell\modules\WaveFront\app\SampleApp.hs:128:1-43: Splicing declarations
    makeLensesWith abbreviatedFields ''AppState
  ======>
    class HasClientsize s a | s -> a where
      clientsize :: Lens' s a
    instance HasClientsize AppState (V2 Int) where
      {-# INLINE clientsize #-}
      clientsize
        f_aSz9
        (AppState x1_aSza x2_aSzb x3_aSzc x4_aSzd x5_aSze)
        = fmap
            (\ y1_aSzf -> AppState x1_aSza x2_aSzb y1_aSzf x4_aSzd x5_aSze)
            (f_aSz9 x3_aSzc)
    class HasFrame s a | s -> a where
      frame :: Lens' s a
    instance HasFrame AppState Int where
      {-# INLINE frame #-}
      frame f_aSzg (AppState x1_aSzh x2_aSzi x3_aSzj x4_aSzk x5_aSzl)
        = fmap
            (\ y1_aSzm -> AppState x1_aSzh x2_aSzi x3_aSzj y1_aSzm x5_aSzl)
            (f_aSzg x4_aSzk)
    class HasMouse s a | s -> a where
      mouse :: Lens' s a
    instance HasMouse AppState (Maybe (V2 Double)) where
      {-# INLINE mouse #-}
      mouse f_aSzn (AppState x1_aSzo x2_aSzp x3_aSzq x4_aSzr x5_aSzs)
        = fmap
            (\ y1_aSzt -> AppState x1_aSzo y1_aSzt x3_aSzq x4_aSzr x5_aSzs)
            (f_aSzn x2_aSzp)
    class HasRotation s a | s -> a where
      rotation :: Lens' s a
    instance HasRotation AppState (V2 Double) where
      {-# INLINE rotation #-}
      rotation f_aSzu (AppState x1_aSzv x2_aSzw x3_aSzx x4_aSzy x5_aSzz)
        = fmap
            (\ y1_aSzA -> AppState y1_aSzA x2_aSzw x3_aSzx x4_aSzy x5_aSzz)
            (f_aSzu x1_aSzv)
    class HasScene s a | s -> a where
      scene :: Lens' s a
    instance HasScene AppState Scene where
      {-# INLINE scene #-}
      scene f_aSzB (AppState x1_aSzC x2_aSzD x3_aSzE x4_aSzF x5_aSzG)
        = fmap
            (\ y1_aSzH -> AppState x1_aSzC x2_aSzD x3_aSzE x4_aSzF y1_aSzH)
            (f_aSzB x5_aSzG)
C:\Users\Jonatan\Desktop\Haskell\modules\WaveFront\app\SampleApp.hs:129:1-40: Splicing declarations
    makeLensesWith abbreviatedFields ''Scene
  ======>
    class HasMeshes s a | s -> a where
      meshes :: Lens' s a
    instance HasMeshes Scene [Mesh Double Int] where
      {-# INLINE meshes #-}
      meshes = iso (\ (Scene x_aSCz) -> x_aSCz) Scene
