C:\Users\Jonatan\Desktop\Haskell\modules\WaveFront\src\Graphics\WaveFront\Lenses.hs:50:1-48: Splicing declarations
    makeLensesWith abbreviatedFields ''VertexIndices
  ======>
    class HasInormal s a | s -> a where
      inormal :: Control.Lens.Type.Lens' s a
    instance HasInormal (VertexIndices i_akWu) (Maybe i_akWu) where
      {-# INLINE inormal #-}
      inormal f_anPI (VertexIndices x1_anPJ x2_anPK x3_anPL)
        = fmap
            (\ y1_anPM -> VertexIndices x1_anPJ x2_anPK y1_anPM)
            (f_anPI x3_anPL)
    class HasItexcoord s a | s -> a where
      itexcoord :: Control.Lens.Type.Lens' s a
    instance HasItexcoord (VertexIndices i_akWu) (Maybe i_akWu) where
      {-# INLINE itexcoord #-}
      itexcoord f_anPN (VertexIndices x1_anPO x2_anPP x3_anPQ)
        = fmap
            (\ y1_anPR -> VertexIndices x1_anPO y1_anPR x3_anPQ)
            (f_anPN x2_anPP)
    class HasIvertex s a | s -> a where
      ivertex :: Control.Lens.Type.Lens' s a
    instance HasIvertex (VertexIndices i_akWu) i_akWu where
      {-# INLINE ivertex #-}
      ivertex f_anPS (VertexIndices x1_anPT x2_anPU x3_anPV)
        = fmap
            (\ y1_anPW -> VertexIndices y1_anPW x2_anPU x3_anPV)
            (f_anPS x1_anPT)
C:\Users\Jonatan\Desktop\Haskell\modules\WaveFront\src\Graphics\WaveFront\Lenses.hs:51:1-39: Splicing declarations
    makeLensesWith abbreviatedFields ''Face
  ======>
    class HasIndices s a | s -> a where
      indices :: Control.Lens.Type.Lens' s a
    instance HasIndices (Face f_akW4 s_akW5 i_akW6 m_akW7) (m_akW7 (VertexIndices i_akW6)) where
      {-# INLINE indices #-}
      indices f_anSy (Face x1_anSz x2_anSA)
        = fmap (\ y1_anSB -> Face y1_anSB x2_anSA) (f_anSy x1_anSz)
    class HasMaterial s a | s -> a where
      material :: Control.Lens.Type.Lens' s a
    instance HasMaterial (Face f_akW4 s_akW5 i_akW6 m_akW7) (Material f_akW4 s_akW5) where
      {-# INLINE material #-}
      material f_anSC (Face x1_anSD x2_anSE)
        = fmap (\ y1_anSF -> Face x1_anSD y1_anSF) (f_anSC x2_anSE)
C:\Users\Jonatan\Desktop\Haskell\modules\WaveFront\src\Graphics\WaveFront\Lenses.hs:52:1-41: Splicing declarations
    makeLensesWith abbreviatedFields ''Colour
  ======>
    class HasAlpha s a | s -> a where
      alpha :: Control.Lens.Type.Lens' s a
    instance HasAlpha (Colour f_akEu) f_akEu where
      {-# INLINE alpha #-}
      alpha f_anUH (Colour x1_anUI x2_anUJ x3_anUK x4_anUL)
        = fmap
            (\ y1_anUM -> Colour x1_anUI x2_anUJ x3_anUK y1_anUM)
            (f_anUH x4_anUL)
    class HasBlue s a | s -> a where
      blue :: Control.Lens.Type.Lens' s a
    instance HasBlue (Colour f_akEu) f_akEu where
      {-# INLINE blue #-}
      blue f_anUN (Colour x1_anUO x2_anUP x3_anUQ x4_anUR)
        = fmap
            (\ y1_anUS -> Colour x1_anUO x2_anUP y1_anUS x4_anUR)
            (f_anUN x3_anUQ)
    class HasGreen s a | s -> a where
      green :: Control.Lens.Type.Lens' s a
    instance HasGreen (Colour f_akEu) f_akEu where
      {-# INLINE green #-}
      green f_anUT (Colour x1_anUU x2_anUV x3_anUW x4_anUX)
        = fmap
            (\ y1_anUY -> Colour x1_anUU y1_anUY x3_anUW x4_anUX)
            (f_anUT x2_anUV)
    class HasRed s a | s -> a where
      red :: Control.Lens.Type.Lens' s a
    instance HasRed (Colour f_akEu) f_akEu where
      {-# INLINE red #-}
      red f_anUZ (Colour x1_anV0 x2_anV1 x3_anV2 x4_anV3)
        = fmap
            (\ y1_anV4 -> Colour y1_anV4 x2_anV1 x3_anV2 x4_anV3)
            (f_anUZ x1_anV0)
C:\Users\Jonatan\Desktop\Haskell\modules\WaveFront\src\Graphics\WaveFront\Lenses.hs:53:1-43: Splicing declarations
    makeLensesWith abbreviatedFields ''Material
  ======>
    class HasAmbient s a | s -> a where
      ambient :: Control.Lens.Type.Lens' s a
    instance HasAmbient (Material f_ajBb s_ajBc) (Colour f_ajBb) where
      {-# INLINE ambient #-}
      ambient f_anYf (Material x1_anYg x2_anYh x3_anYi x4_anYj)
        = fmap
            (\ y1_anYk -> Material y1_anYk x2_anYh x3_anYi x4_anYj)
            (f_anYf x1_anYg)
    class HasDiffuse s a | s -> a where
      diffuse :: Control.Lens.Type.Lens' s a
    instance HasDiffuse (Material f_ajBb s_ajBc) (Colour f_ajBb) where
      {-# INLINE diffuse #-}
      diffuse f_anYl (Material x1_anYm x2_anYn x3_anYo x4_anYp)
        = fmap
            (\ y1_anYq -> Material x1_anYm y1_anYq x3_anYo x4_anYp)
            (f_anYl x2_anYn)
    class HasSpecular s a | s -> a where
      specular :: Control.Lens.Type.Lens' s a
    instance HasSpecular (Material f_ajBb s_ajBc) (Colour f_ajBb) where
      {-# INLINE specular #-}
      specular f_anYr (Material x1_anYs x2_anYt x3_anYu x4_anYv)
        = fmap
            (\ y1_anYw -> Material x1_anYs x2_anYt y1_anYw x4_anYv)
            (f_anYr x3_anYu)
    class HasTexture s a | s -> a where
      texture :: Control.Lens.Type.Lens' s a
    instance HasTexture (Material f_ajBb s_ajBc) (Maybe s_ajBc) where
      {-# INLINE texture #-}
      texture f_anYx (Material x1_anYy x2_anYz x3_anYA x4_anYB)
        = fmap
            (\ y1_anYC -> Material x1_anYy x2_anYz x3_anYA y1_anYC)
            (f_anYx x4_anYB)
C:\Users\Jonatan\Desktop\Haskell\modules\WaveFront\src\Graphics\WaveFront\Lenses.hs:54:1-40: Splicing declarations
    makeLensesWith abbreviatedFields ''Model
  ======>
    class HasFaces s a | s -> a where
      faces :: Control.Lens.Type.Lens' s a
    instance HasFaces (Model f_ajB7 s_ajB8 i_ajB9 m_ajBa) (m_ajBa (Face f_ajB7 s_ajB8 i_ajB9 m_ajBa)) where
      {-# INLINE faces #-}
      faces
        f_ao22
        (Model x1_ao23 x2_ao24 x3_ao25 x4_ao26 x5_ao27 x6_ao28 x7_ao29)
        = fmap
            (\ y1_ao2a
               -> Model x1_ao23 x2_ao24 x3_ao25 y1_ao2a x5_ao27 x6_ao28 x7_ao29)
            (f_ao22 x4_ao26)
    class HasGroups s a | s -> a where
      groups :: Control.Lens.Type.Lens' s a
    instance HasGroups (Model f_ajB7 s_ajB8 i_ajB9 m_ajBa) (containers-0.5.7.1:Data.Map.Base.Map (containers-0.5.7.1:Data.Set.Base.Set s_ajB8) (i_ajB9,
                                                                                                                                                i_ajB9)) where
      {-# INLINE groups #-}
      groups
        f_ao2b
        (Model x1_ao2c x2_ao2d x3_ao2e x4_ao2f x5_ao2g x6_ao2h x7_ao2i)
        = fmap
            (\ y1_ao2j
               -> Model x1_ao2c x2_ao2d x3_ao2e x4_ao2f x5_ao2g y1_ao2j x7_ao2i)
            (f_ao2b x6_ao2h)
    class HasMaterials s a | s -> a where
      materials :: Control.Lens.Type.Lens' s a
    instance HasMaterials (Model f_ajB7 s_ajB8 i_ajB9 m_ajBa) (MTLTable f_ajB7 s_ajB8) where
      {-# INLINE materials #-}
      materials
        f_ao2k
        (Model x1_ao2l x2_ao2m x3_ao2n x4_ao2o x5_ao2p x6_ao2q x7_ao2r)
        = fmap
            (\ y1_ao2s
               -> Model x1_ao2l x2_ao2m x3_ao2n x4_ao2o y1_ao2s x6_ao2q x7_ao2r)
            (f_ao2k x5_ao2p)
    class HasNormals s a | s -> a where
      normals :: Control.Lens.Type.Lens' s a
    instance HasNormals (Model f_ajB7 s_ajB8 i_ajB9 m_ajBa) (m_ajBa (Linear.V3.V3 f_ajB7)) where
      {-# INLINE normals #-}
      normals
        f_ao2t
        (Model x1_ao2u x2_ao2v x3_ao2w x4_ao2x x5_ao2y x6_ao2z x7_ao2A)
        = fmap
            (\ y1_ao2B
               -> Model x1_ao2u y1_ao2B x3_ao2w x4_ao2x x5_ao2y x6_ao2z x7_ao2A)
            (f_ao2t x2_ao2v)
    class HasObjects s a | s -> a where
      objects :: Control.Lens.Type.Lens' s a
    instance HasObjects (Model f_ajB7 s_ajB8 i_ajB9 m_ajBa) (containers-0.5.7.1:Data.Map.Base.Map (containers-0.5.7.1:Data.Set.Base.Set s_ajB8) (i_ajB9,
                                                                                                                                                 i_ajB9)) where
      {-# INLINE objects #-}
      objects
        f_ao2C
        (Model x1_ao2D x2_ao2E x3_ao2F x4_ao2G x5_ao2H x6_ao2I x7_ao2J)
        = fmap
            (\ y1_ao2K
               -> Model x1_ao2D x2_ao2E x3_ao2F x4_ao2G x5_ao2H x6_ao2I y1_ao2K)
            (f_ao2C x7_ao2J)
    class HasTexcoords s a | s -> a where
      texcoords :: Control.Lens.Type.Lens' s a
    instance HasTexcoords (Model f_ajB7 s_ajB8 i_ajB9 m_ajBa) (m_ajBa (Linear.V2.V2 f_ajB7)) where
      {-# INLINE texcoords #-}
      texcoords
        f_ao2L
        (Model x1_ao2M x2_ao2N x3_ao2O x4_ao2P x5_ao2Q x6_ao2R x7_ao2S)
        = fmap
            (\ y1_ao2T
               -> Model x1_ao2M x2_ao2N y1_ao2T x4_ao2P x5_ao2Q x6_ao2R x7_ao2S)
            (f_ao2L x3_ao2O)
    class HasVertices s a | s -> a where
      vertices :: Control.Lens.Type.Lens' s a
    instance HasVertices (Model f_ajB7 s_ajB8 i_ajB9 m_ajBa) (m_ajBa (Linear.V3.V3 f_ajB7)) where
      {-# INLINE vertices #-}
      vertices
        f_ao2U
        (Model x1_ao2V x2_ao2W x3_ao2X x4_ao2Y x5_ao2Z x6_ao30 x7_ao31)
        = fmap
            (\ y1_ao32
               -> Model y1_ao32 x2_ao2W x3_ao2X x4_ao2Y x5_ao2Z x6_ao30 x7_ao31)
            (f_ao2U x1_ao2V)
